========== ARCHIVO: acceso-denegado.php ==========

<?php

if(is_file('vista/'.$pagina.'.php')){
    require_once ('vista/'.$pagina.'.php');  //si la pagina existe se carga su vista correspondiente
}else{
    echo "PAGINA EN CONSTRUCCIÃ“N";
}
========== FIN ARCHIVO: acceso-denegado.php ==========



========== ARCHIVO: Auth.php ==========

<?php
// AuthController.php

class Auth{
    public function login() {
        require_once 'Vistas/login.php';
    }

    public function register() {
        require_once 'Vistas/register.php';
    }
}
?>
========== FIN ARCHIVO: Auth.php ==========



========== ARCHIVO: ayuda.php ==========

<?php
$pagina = "ayuda";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
?>
========== FIN ARCHIVO: ayuda.php ==========



========== ARCHIVO: backup.php ==========

<?php
ini_set('display_errors', 0);
ini_set('log_errors', 1);
error_reporting(E_ALL);

require_once __DIR__ . '/../modelo/backup.php';
require_once __DIR__ . '/../modelo/bitacora.php';
require_once __DIR__ . '/../modelo/permiso.php';
define('MODULO_BACKUP', 17);

// InicializaciÃ³n de permisos para la vista
$permisos = new Permisos();
$permisosUsuario = $permisos->getPermisosPorRolModulo();

// FunciÃ³n simple de depuraciÃ³n a archivo
function backup_debug_log($mensaje) {
    $logDir = __DIR__ . '/../db/backup/';
    if (!is_dir($logDir)) { @mkdir($logDir, 0775, true); }
    $logFile = $logDir . 'backup_debug.log';
    @file_put_contents($logFile, '[' . date('c') . "] CONTROLADOR: " . $mensaje . "\n", FILE_APPEND);
}

// Capturar errores fatales y registrar en log (y devolver JSON si aplica)
register_shutdown_function(function() {
    $error = error_get_last();
    if ($error && in_array($error['type'], [E_ERROR, E_PARSE, E_CORE_ERROR, E_COMPILE_ERROR])) {
        $msg = 'FATAL: ' . $error['message'] . ' en ' . $error['file'] . ':' . $error['line'];
        backup_debug_log($msg);
        if (isset($_GET['accion']) && $_GET['accion'] === 'generar') {
            if (!headers_sent()) { header('Content-Type: application/json'); }
            echo json_encode(['success' => false, 'error' => 'Error fatal en el servidor.', 'detalle' => $msg]);
        }
    }
});

if (isset($_GET['accion'])) {

    if ($_GET['accion'] === 'generar') {
        header('Content-Type: application/json');
        try {
            // asegurar dir de logs
            backup_debug_log('--- INICIO GENERAR ---');
            $tipo = isset($_GET['tipo']) && $_GET['tipo'] === 'S' ? 'S' : 'P';
            $backup = new Backup($tipo);
            $nombreArchivo = 'backup_' . ($tipo === 'S' ? 'seguridad' : 'principal') . '_' . date('Ymd_His') . '.sql';
            $ok = $backup->generar($nombreArchivo);
            $ruta = realpath(__DIR__ . '/../db/backup/' . $nombreArchivo);
            backup_debug_log("AcciÃ³n GENERAR tipo={$tipo}, archivo={$nombreArchivo}, ok=" . ($ok ? '1' : '0') . ", ruta=" . ($ruta ?: 'N/A'));

            if ($ok && $ruta && file_exists($ruta)) {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    if (isset($_SESSION['id_usuario'])) {
                        $bitacoraModel = new Bitacora();
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_BACKUP,
                            'GENERAR',
                            'Se generÃ³ un respaldo ' . ($tipo === 'S' ? 'de seguridad' : 'principal') . ': ' . $nombreArchivo,
                            'media'
                        );
                    }
                }
                echo json_encode(['success' => true, 'archivo' => $nombreArchivo]);
            } else {
                $logFile = __DIR__ . '/../db/backup/backup_debug.log';
                $logMsg = file_exists($logFile) ? @file_get_contents($logFile) : '';
                backup_debug_log('Error al GENERAR respaldo (ok=0 o archivo no existe).');
                echo json_encode([
                    'success' => false,
                    'error' => 'Error al generar el respaldo. Ver debug.',
                    'debug' => $logMsg
                ]);
            }
        } catch (Throwable $e) {
            backup_debug_log('ExcepciÃ³n en GENERAR: ' . $e->getMessage());
            echo json_encode([
                'success' => false,
                'error' => 'ExcepciÃ³n en el servidor.',
                'detalle' => $e->getMessage()
            ]);
        }
        exit;
    }

    // ... resto del cÃ³digo igual ...

    if ($_GET['accion'] === 'descargar') {
        $archivo = $_GET['archivo'] ?? '';
        $ruta = realpath(__DIR__ . '/../db/backup/' . $archivo);
        backup_debug_log('AcciÃ³n DESCARGAR archivo=' . $archivo . ', existe=' . ((bool)$ruta && file_exists($ruta) ? '1' : '0'));
        if ($archivo && file_exists($ruta)) {
            header('Content-Type: application/sql');
            header('Content-Disposition: attachment; filename="' . basename($archivo) . '"');
            header('Content-Length: ' . filesize($ruta));
            readfile($ruta);
            exit;
        } else {
            echo "Archivo no encontrado";
            exit;
        }
    }

    if ($_GET['accion'] === 'consultar') {
        header('Content-Type: application/json');
        $backup = new Backup();
        $backups = $backup->listar();
        sort($backups);
        backup_debug_log('AcciÃ³n CONSULTAR, total=' . count($backups));
        echo json_encode($backups);
        exit;
    }

    if ($_GET['accion'] === 'restaurar') {
        $archivo = $_GET['archivo'] ?? '';
        $ruta = realpath(__DIR__ . '/../db/backup/' . $archivo);
        header('Content-Type: application/json');
        backup_debug_log('AcciÃ³n RESTAURAR archivo=' . $archivo . ', existe=' . ($ruta && file_exists($ruta) ? '1' : '0'));
        if ($archivo && file_exists($ruta)) {
            $backup = new Backup();
            $ok = $backup->restaurar($archivo);
            backup_debug_log('Resultado RESTAURAR ok=' . ($ok ? '1' : '0'));
            if ($ok) {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    if (isset($_SESSION['id_usuario'])) {
                        $bitacoraModel = new Bitacora();
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_BACKUP,
                            'RESTAURAR',
                            'Se restaurÃ³ el respaldo: ' . $archivo,
                            'alta'
                        );
                    }
                }
                echo json_encode(['success' => true]);
            } else {
                echo json_encode(['success' => false, 'error' => 'Error al restaurar']);
            }
        } else {
            echo json_encode(['success' => false, 'error' => 'Archivo no encontrado']);
        }
        exit;
    }
}

// Renderizado de la vista
$pagina = "backup";
if (is_file("vista/" . $pagina . ".php")) {
    $backup = new Backup();
    $backups = $backup->listar();
    require_once("vista/" . $pagina . ".php");
    if (isset($_SESSION['id_usuario'])) {
        if (!defined('SKIP_SIDE_EFFECTS')) {
            $bitacoraModel = new Bitacora();
            $bitacoraModel->registrarBitacora(
                $_SESSION['id_usuario'],
                MODULO_BACKUP,
                'ACCESAR',
                'El usuario accediÃ³ al mÃ³dulo de Backup',
                'media'
            );
        }
    }
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
?>
========== FIN ARCHIVO: backup.php ==========



========== ARCHIVO: bitacora.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'modelo/bitacora.php';
require_once __DIR__ . '/../modelo/permiso.php';
$permisos = new Permisos();
$permisosUsuario = $permisos->getPermisosPorRolModulo();
define('MODULO_BITACORA', 1);
$bitacoraModel = new Bitacora();

try {
    $registros = $bitacoraModel->obtenerRegistrosDetallados(500);
} catch (Exception $e) {
    $registros = [];
}

$pagina = "bitacora";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '19',
    'ACCESO',
    'El usuario accediÃ³ al al modulo de bitacora',
    'alta'
);

    }
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();

========== FIN ARCHIVO: bitacora.php ==========



========== ARCHIVO: carrito.php ==========

<?php
ob_start();
require_once 'modelo/producto.php';
require_once 'modelo/carrito.php';
require_once 'modelo/factura.php';
require_once 'modelo/DolarService.php';
require_once 'modelo/permiso.php';
$permisosModel = new Permisos();
$permisosUsuario = $permisosModel->getPermisosPorRolModulo();
$data = [];
$dolarService = new DolarService();
$precioDolar = $dolarService->obtenerPrecioDolar();
$dolarService->guardarPrecioCache($precioDolar);

// Manejar generaciÃ³n de reportes PDF
try {
    $dolarService = new DolarService();
    $precioDolar = $dolarService->obtenerPrecioDolar();
    $dolarService->guardarPrecioCache($precioDolar);
    
    // Asignar a $data
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
} catch (Exception $e) {
    // En caso de error, usar valores por defecto
    $data['monitors'] = [
        'bcv' => [
            'price' => 35.50,
            'updated' => date('Y-m-d H:i:s') . ' (valor por defecto)'
        ]
    ];
    error_log('Error obteniendo precio dÃ³lar: ' . $e->getMessage());
}
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $accion = $_POST['accion'] ?? '';
    
    switch ($accion) {



            case 'agregar_al_carrito':
                $id_producto = $_POST['id_producto'] ?? null;
                if ($id_producto !== null) {
                    $carrito = new Carrito();
                    $id_cliente = $_SESSION['id_usuario'];; // Obtener de la sesiÃ³n en producciÃ³n
                    
                    try {
                        $carritoCliente = $carrito->obtenerCarritoPorCliente($id_cliente);
                        
                        if (!$carritoCliente) {
                            $carrito->crearCarrito($id_cliente);
                            $carritoCliente = $carrito->obtenerCarritoPorCliente($id_cliente);
                        }
                        
                        $id_carrito = $carritoCliente['id_carrito'];
                        $cantidad = 1; // Cantidad predeterminada
                        
                        if ($carrito->agregarProductoAlCarrito($id_carrito, $id_producto, $cantidad)) {
                            echo json_encode([
                                'status' => 'success',
                                'message' => 'Producto agregado al carrito correctamente'
                            ]);
                        } else {
                            echo json_encode([
                                'status' => 'error',
                                'message' => 'Error al agregar el producto al carrito'
                            ]);
                        }
                    } catch (Exception $e) {
                        echo json_encode([
                            'status' => 'error',
                            'message' => 'Error: ' . $e->getMessage()
                        ]);
                    }
                } else {
                    echo json_encode([
                        'status' => 'error',
                        'message' => 'ID de producto no vÃ¡lido'
                    ]);
                }
                
                break;

        case 'actualizar_cantidad':
            $id_carrito_detalle = $_POST['id_carrito_detalle'] ?? null;
            $cantidad = $_POST['cantidad'] ?? null;

            if ($id_carrito_detalle !== null && $cantidad !== null) {
                $carrito = new Carrito();
                if ($carrito->actualizarCantidadProducto($id_carrito_detalle, $cantidad)) {
                    echo json_encode(['status' => 'success', 'message' => 'Cantidad actualizada correctamente']);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Error al actualizar la cantidad']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Datos incompletos']);
            }
            break;

        case 'eliminar_del_carrito':
            $id_carrito_detalle = $_POST['id_carrito_detalle'] ?? null;
            if ($id_carrito_detalle !== null) {
                $carrito = new Carrito();
                if ($carrito->eliminarProductoDelCarrito($id_carrito_detalle)) {
                    echo json_encode(['status' => 'success', 'message' => 'Producto eliminado del carrito']);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el producto del carrito']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de detalle del carrito no proporcionado']);
            }
            break;

        case 'eliminar_todo_carrito':
            $id_cliente = $_SESSION['id_usuario'];; // Obtener de la sesiÃ³n
            $carrito = new Carrito();
            $carritoCliente = $carrito->obtenerCarritoPorCliente($id_cliente);

            if ($carritoCliente) {
                $id_carrito = $carritoCliente['id_carrito'];
                if ($carrito->eliminarTodoElCarrito($id_carrito)) {
                    echo json_encode(['status' => 'success', 'message' => 'Carrito vaciado correctamente']);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Error al vaciar el carrito']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'No se encontrÃ³ el carrito del cliente']);
            }
            break;

case 'registrar_compra':
    $factura = new Factura();
    // AquÃ­ se debe obtener el ID del cliente de la sesiÃ³n
    $factura->setCliente($_SESSION['cedula']); // Obtener de la sesiÃ³n
    $factura->setFecha(date('Y-m-d H:i:s'));
    $factura->setDescuento(0); // Descuento inicial
    $factura->setEstatus('Borrador'); // Estado inicial de la compra
    $productos = $_POST['productos'] ?? [];
    $cantidades = $_POST['cantidad'] ?? [];
    $factura->setIdProducto($productos);
    $factura->setCantidad($cantidades);
   /*
    $carrito = new Carrito();
    $carritoCliente = $carrito->obtenerCarritoPorCliente($id_cliente);
    $id_carrito = $carritoCliente['id_carrito'];
    if ($carritoCliente) {
        $id_carrito = $carritoCliente['id_carrito'];
    } else {
        echo json_encode(['status' => 'error', 'message' => 'No se encontrÃ³ un carrito para este cliente.']);
    }
    */
        try {
            $resultado = $factura->facturaTransaccion("Ingresar");

            if (is_array($resultado) && isset($resultado['error'])) {

                echo json_encode(['status' => 'error', 'message' => $resultado['error']]);
            } elseif ($resultado === true) {
                // Todo fue exitoso
                $carrito = new Carrito();   
                $carritoCliente = $carrito->obtenerCarritoPorCliente($_SESSION['id_usuario']);
                $id_carrito = $carritoCliente['id_carrito'];
                $carrito->eliminarTodoElCarrito($id_carrito);
                echo json_encode(['status' => 'success', 'message' => 'Registro de Pedido se registro correctamente (Falta Pagar el pedido)']);
            } else {
                // Fallback genÃ©rico
                echo json_encode(['status' => 'error', 'message' => 'Error desconocido al registrar la compra']);
            }
        } catch (Exception $e) {
            echo json_encode(['status' => 'error', 'message' => 'ExcepciÃ³n: ' . $e->getMessage()]);
        }

    break;



        case 'filtrar_por_marca':
            $id_marca = $_POST['id_marca'] ?? null;
            $producto = new Productos();
            $productos = $producto->obtenerProductosPorMarca($id_marca);

            if (!empty($productos)) {
                $html = '';
                foreach ($productos as $producto) {
                    $html .= '<tr>
                                <td>
                                    <button type="button" class="btn btn-modificar btn-agregar-carrito" 
                                            data-id-producto="'.htmlspecialchars($producto['id_producto']).'">
                                        Agregar al carrito
                                    </button>
                                </td>
                                <td>'.htmlspecialchars($producto['nombre_producto']).'</td>
                                <td>'.($producto['stock'] > 0 ? $producto['stock'] : '<p style="background: red; color:white; border-radius: 10px; opacity: 0.8;box-shadow: 2px 2px 5px red;">Agotado</p>').'</td>
                                <td>'.htmlspecialchars($producto['descripcion_producto']).'</td>
                                <td>'.htmlspecialchars($producto['marca']).'</td>
                                <td>'.htmlspecialchars($producto['serial']).'</td>
                            </tr>';
                }
                echo json_encode(['status' => 'success', 'html' => $html]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'No se encontraron productos para la marca seleccionada']);
            }
            break;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            break;
    }
    exit;
}

// Funciones para la vista
function obtenerProductos() {
    $producto = new Productos();
    return $producto->obtenerProductoStock();
}

function obtenerProductosDelCarrito() {
    $carrito = new Carrito();
    $id_cliente = $_SESSION['id_usuario']; // Obtener de la sesiÃ³n
    $carritoCliente = $carrito->obtenerCarritoPorCliente($id_cliente);

    if ($carritoCliente) {
        $id_carrito = $carritoCliente['id_carrito'];
        return $carrito->obtenerProductosDelCarrito($id_carrito);
    }
    return [];
}

function obtenerMarcas() {
    $producto = new Productos();
    return $producto->obtenerMarcas();
}

// Cargar vista
$pagina = "carrito";
if (is_file("vista/" . $pagina . ".php")) {
    $productos = obtenerProductos();
    $carritos = obtenerProductosDelCarrito();
    $marcas = obtenerMarcas();
    require_once("vista/" . $pagina . ".php");

} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
========== FIN ARCHIVO: carrito.php ==========



========== ARCHIVO: catalogo.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'modelo/producto.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/DolarService.php';
require_once 'librerias/pdf.php';

// Definir constantes para IDs de mÃ³dulo
define('MODULO_CATALOGO', 10);

$productosModel = new Productos();
$bitacoraModel = new Bitacora();
$esAdmin = isset($_SESSION['nombre_rol']) && $_SESSION['nombre_rol'] == 'Administrador';

$data = [];
$dolarService = new DolarService();
$precioDolar = $dolarService->obtenerPrecioDolar();
$dolarService->guardarPrecioCache($precioDolar);

// Manejar generaciÃ³n de reportes PDF
try {
    $dolarService = new DolarService();
    $precioDolar = $dolarService->obtenerPrecioDolar();
    $dolarService->guardarPrecioCache($precioDolar);
    
    // Asignar a $data
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
} catch (Exception $e) {
    // En caso de error, usar valores por defecto
    $data['monitors'] = [
        'bcv' => [
            'price' => 35.50,
            'updated' => date('Y-m-d H:i:s') . ' (valor por defecto)'
        ]
    ];
    error_log('Error obteniendo precio dÃ³lar: ' . $e->getMessage());
}

// Manejar generaciÃ³n de reportes PDF
if (isset($_GET['reporte']) && $esAdmin) {
    switch ($_GET['reporte']) {
        case 'accesos_semanales':
            $datosAccesos = $bitacoraModel->obtenerEstadisticasAccesos();
            $pdf = new PDF('Reporte de Accesos', 'EstadÃ­sticas semanales de visitas al catÃ¡logo');
            $pdf->generarReporteAccesos($datosAccesos);
            exit;
            
        case 'usuarios_activos':
            $usuariosActivos = $bitacoraModel->obtenerUsuariosMasActivos(10);
            $pdf = new PDF('Reporte de Usuarios Activos', 'Top 10 usuarios con mÃ¡s accesos al catÃ¡logo');
            $pdf->generarReporteUsuarios($usuariosActivos);
            exit;
    }
}

function generarReporteAccesosSemanales($bitacoraModel) {
    $datos = $bitacoraModel->obtenerEstadisticasAccesoSemanal();
    $pdf = new PDF();
    $pdf->generarReporteAccesos($datos);
}


// Manejar solicitudes AJAX
if ($_SERVER["REQUEST_METHOD"] == "POST" && isset($_POST['accion'])) {

    try {
    $productos = $productosModel->obtenerProductosConMarca();
    $marcas = $productosModel->obtenerMarcas();
    $esAdmin = isset($_SESSION['nombre_rol']) && 
           ($_SESSION['nombre_rol'] == 'Administrador' || 
            $_SESSION['nombre_rol'] == 'SuperUsuario');
    $combos = $productosModel->obtenerCombosDisponibles($esAdmin);
    
    // Pasar el precio del dÃ³lar a la vista
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
    
} catch (PDOException $e) {
    $productos = [];
    $marcas = [];
    $combos = [];
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
}

    try {
        header('Content-Type: application/json');
        $accion = $_POST['accion'];

        // (revert) sin endpoint obtener_marcas

if ($accion == 'obtener_datos_reportes') {
    try {
        // Obtener estadÃ­sticas de accesos
        $estadisticas = $bitacoraModel->obtenerEstadisticasAccesos();
        
        // Obtener usuarios mÃ¡s activos
        $usuariosActivos = $bitacoraModel->obtenerUsuariosMasActivos(10);
        
        echo json_encode([
            'status' => 'success',
            'estadisticas' => $estadisticas,
            'usuarios' => $usuariosActivos
        ]);
    } catch (Exception $e) {
        echo json_encode([
            'status' => 'error',
            'message' => $e->getMessage()
        ]);
    }
    exit;
}

        if ($accion == 'filtrar_por_marca') {
            $id_marca = $_POST['id_marca'] ?? null;
            $productos = $id_marca ? $productosModel->obtenerProductosPorMarca($id_marca) : $productosModel->obtenerProductosConMarca();

            // Registrar filtrado
            if (isset($_SESSION['id_usuario'])) {
                $marcaFiltro = $id_marca ? " (Marca ID: $id_marca)" : "";
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATALOGO,
                    'CONSULTAR',
                    "Filtrado de productos por marca" . $marcaFiltro,
                    'baja'
                );
            }

            if (!empty($productos)) {
                $html = '';
                foreach ($productos as $producto) {
                    $html .= '<tr class="product-row" data-id="' . htmlspecialchars($producto['id_producto']) . '">
                                <td>
                                    <button type="button" class="btn btn-primary btn-sm btn-agregar-carrito" 
                                            data-id-producto="' . htmlspecialchars($producto['id_producto']) . '">
                                        <i class="bi bi-cart-plus"></i> <span class="btn-text">Agregar</span>
                                    </button>
                                </td>
                                <td>
                                    <div class="d-flex align-items-center">';
                    if (!empty($producto['imagen'])) {
                        $html .= '<img src="' . htmlspecialchars($producto['imagen']) . '" class="product-image"
                                    alt="' . htmlspecialchars($producto['nombre_producto']) . '"
                                    onerror="this.src=\'img/placeholder-product.png\'">';
                    } else {
                        $html .= '<div class="product-image img-placeholder">
                                    <i class="bi bi-image"></i>
                                  </div>';
                    }
                    $html .= '<div>
                                <strong>' . htmlspecialchars($producto['nombre_producto']) . '</strong>
                                <div class="text-muted small">' . htmlspecialchars($producto['serial']) . '</div>
                              </div>
                            </div>
                        </td>
                        <td>
                            <span class="badge ' . ($producto['stock'] > 0 ? 'bg-success' : 'bg-danger') . ' stock-badge">
                                ' . htmlspecialchars($producto['stock']) . '
                            </span>
                        </td>
                        <td>' . htmlspecialchars($producto['descripcion_producto']) . '</td>
                        <td>' . htmlspecialchars($producto['marca']) . '</td>
                        <td class="fw-bold">$' . number_format($producto['precio'], 2) . '</td>
                    </tr>';
                }
                echo json_encode(['status' => 'success', 'html' => $html]);
            } else {
                echo json_encode([
                    'status' => 'info',
                    'message' => 'No hay productos disponibles',
                    'html' => '<tr><td colspan="6" class="text-center py-4"><i class="bi bi-exclamation-circle"></i> No hay productos disponibles para esta selecciÃ³n</td></tr>'
                ]);
            }
            exit;
        }

        if ($accion == 'validar_stock') {
            try {
                header('Content-Type: application/json');
                $id_producto = $_POST['id_producto'] ?? null;
                $cantidad = isset($_POST['cantidad']) ? (int)$_POST['cantidad'] : 1;
                if (!$id_producto) {
                    throw new Exception('Producto no especificado');
                }
                $producto = $productosModel->obtenerProductoPorId($id_producto);
                if (!$producto) {
                    throw new Exception('Producto no encontrado');
                }
                $stock = (int)($producto['stock'] ?? 0);
                echo json_encode([
                    'status' => 'success',
                    'stock_disponible' => $stock,
                    'suficiente' => $stock >= $cantidad
                ]);
            } catch (Exception $e) {
                echo json_encode([
                    'status' => 'error',
                    'message' => $e->getMessage()
                ]);
            }
            exit;
        }

        if ($accion == 'agregar_al_carrito') {
            try {
                if (!isset($_SESSION['id_usuario'])) {
                    throw new Exception('Debe iniciar sesiÃ³n para agregar productos al carrito');
                }

                $id_producto = $_POST['id_producto'] ?? null;
                $cantidad = $_POST['cantidad'] ?? 1;

                if (!$id_producto) {
                    throw new Exception('Producto no especificado');
                }

                // Obtener info del producto para el registro
                $producto = $productosModel->obtenerProductoPorId($id_producto);
                $nombreProducto = $producto ? $producto['nombre_producto'] : 'ID: '.$id_producto;

                $result = $productosModel->agregarProductoAlCarrito($_SESSION['id_usuario'], $id_producto, $cantidad);

                if ($result) {
                    // Registrar en bitÃ¡cora
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CATALOGO,
                        'INCLUIR',
                        "El usuario agregÃ³ producto al carrito: $nombreProducto (Cantidad: $cantidad)",
                        'alta'
                    );

                    // Respuesta limpia en JSON
                    header('Content-Type: application/json');
                        echo json_encode([
        'status' => 'success',
        'message' => 'Producto agregado correctamente al carrito'
    ]);
} else {
    // Si $result es un string, es un mensaje de error
    $mensaje = is_string($result) ? $result : 'Error al agregar producto al carrito';
    throw new Exception($mensaje);
}
            } catch (Exception $e) {
                header('Content-Type: application/json');
                echo json_encode([
                    'status' => 'error', 
                    'message' => $e->getMessage()
                ]);
            }
            exit;
        }

        if ($accion == 'crear_combo') {
            try {
                $nombre = $_POST['nombre_combo'] ?? '';
                $descripcion = $_POST['descripcion'] ?? '';
                $productos = $_POST['productos'] ?? [];
                $cantidades = $_POST['cantidades'] ?? [];

                if (empty($nombre)) {
                    throw new Exception('El nombre del combo es requerido');
                }

                if (empty($productos)) {
                    throw new Exception('Debe seleccionar al menos un producto para el combo');
                }

                $id_combo = $productosModel->crearCombo($nombre, $descripcion, $productos);

                // Registrar creaciÃ³n de combo
                if (isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CATALOGO,
                        'INCLUIR',
                        "El usuario creÃ³ un nuevo combo: $nombre (ID: $id_combo)",
                        'alta'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Combo creado exitosamente',
                    'id_combo' => $id_combo
                ]);
            } catch (Exception $e) {
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
            exit;
        }

        if ($accion == 'cambiar_estado_combo') {
            try {
                header('Content-Type: application/json');
                
                $id_combo = $_POST['id_combo'] ?? 0;
                
                if (empty($id_combo)) {
                    throw new Exception('ID de combo no especificado');
                }
                
                // Obtener info del combo para registro
                $combo = $productosModel->obtenerComboPorId($id_combo);
                
                // Cambiar el estado usando el modelo
                $resultado = $productosModel->cambiarEstadoCombo($id_combo);
                
                // Registrar cambio de estado
                if ($resultado && isset($_SESSION['id_usuario'])) {
                    $nuevoEstado = $productosModel->obtenerComboPorId($id_combo)['activo'];
                    $accionEstado = $nuevoEstado ? 'habilitÃ³' : 'deshabilitÃ³';
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CATALOGO,
                        'CAMBIAR_ESTADO',
                        "El usuario $accionEstado el combo: {$combo['nombre_combo']} (ID: $id_combo)",
                        'media'
                    );
                }
                
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Estado del combo actualizado correctamente',
                    'nuevo_estado' => $productosModel->obtenerComboPorId($id_combo)['activo']
                ]);
                
            } catch (Exception $e) {
                    echo json_encode([
                    'status' => 'error',
                    'message' => $e->getMessage()
                ]);
            }
            exit;
        }

        if ($accion == 'actualizar_combo') {
            try {
                $id_combo = $_POST['id_combo'] ?? 0;
                $nombre = $_POST['nombre_combo'] ?? '';
                $descripcion = $_POST['descripcion'] ?? '';
                $productos = $_POST['productos'] ?? [];

                if (empty($id_combo)) {
                    throw new Exception('ID de combo no especificado');
                }

                // Obtener info del combo antes de actualizar
                $comboAntes = $productosModel->obtenerComboPorId($id_combo);

                $result = $productosModel->actualizarCombo($id_combo, $nombre, $descripcion, $productos);

                // Registrar actualizaciÃ³n
                if ($result && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CATALOGO,
                        'MODIFICAR',
                        "El usuario modificÃ³ el combo: {$comboAntes['nombre_combo']} (ID: $id_combo)",
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Combo actualizado exitosamente'
                ]);
            } catch (Exception $e) {
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
            exit;
        }

        if ($accion == 'eliminar_combo') {
            try {
                $id_combo = $_POST['id_combo'] ?? 0;

                if (empty($id_combo)) {
                    throw new Exception('ID de combo no especificado');
                }

                // Obtener info del combo antes de eliminar
                $combo = $productosModel->obtenerComboPorId($id_combo);

                $result = $productosModel->eliminarCombo($id_combo);

                // Registrar eliminaciÃ³n
                if ($result && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CATALOGO,
                        'ELIMINAR',
                        "El usuario eliminÃ³ el combo: {$combo['nombre_combo']} (ID: $id_combo)",
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Combo eliminado exitosamente'
                ]);
            } catch (Exception $e) {
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
            exit;
        }

        if ($accion == 'obtener_detalles_combo') {
            try {
                $id_combo = $_POST['id_combo'] ?? 0;

                if (empty($id_combo)) {
                    throw new Exception('ID de combo no especificado');
                }

                $combo = $productosModel->obtenerComboPorId($id_combo);
                $detalles = $productosModel->obtenerDetallesCombo($id_combo);

                echo json_encode([
                    'status' => 'success',
                    'combo' => $combo,
                    'detalles' => $detalles
                ]);
            } catch (Exception $e) {
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
            }
            exit;
        }

        if ($accion == 'agregar_combo_al_carrito') {
            try {
                if (!isset($_SESSION['id_usuario'])) {
                    throw new Exception('Debe iniciar sesiÃ³n para agregar combos');
                }

                $id_combo = $_POST['id_combo'] ?? null;
                if (!$id_combo) {
                    throw new Exception('No se especificÃ³ el combo');
                }

                // Obtener info del combo
                $combo = $productosModel->obtenerComboPorId($id_combo);

                $result = $productosModel->agregarComboAlCarrito($_SESSION['id_usuario'], $id_combo);
                $detalles = $productosModel->obtenerDetallesCombo($id_combo);

                // Registrar en bitÃ¡cora
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATALOGO,
                    'INCLUIR',
                    "El usuario agregÃ³ combo al carrito: {$combo['nombre_combo']} (ID: $id_combo, Productos: ".count($detalles).")",
                    'alta'
                );

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Combo agregado correctamente al carrito',
                    'productos_agregados' => count($detalles)
                ]);
            } catch (Exception $e) {
               echo json_encode([
                    'status' => 'error',
                    'message' => $e->getMessage()
                ]);
            }
            exit;
        }
    } catch (Exception $e) {
        echo json_encode(['status' => 'error', 'message' => $e->getMessage()]);
    }
    exit;
}

// Obtener datos para la vista
try {
    $productos = $productosModel->obtenerProductosConMarca();
    $marcas = $productosModel->obtenerMarcas();
    $esAdmin = isset($_SESSION['nombre_rol']) && 
           ($_SESSION['nombre_rol'] == 'Administrador' || 
            $_SESSION['nombre_rol'] == 'SuperUsuario');
    $combos = $productosModel->obtenerCombosDisponibles($esAdmin);
    
} catch (PDOException $e) {
    $productos = [];
    $marcas = [];
    $combos = [];
    // Mantener los datos del dÃ³lar incluso si hay error en la BD
}

// Asignar la pÃ¡gina y cargar la vista
$pagina = "catalogo";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
         $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '10',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de CatÃ¡logo',
    'media'
);}
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: catalogo.php ==========



========== ARCHIVO: categoria.php ==========

<?php
ob_start();
require_once 'modelo/categoria.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
if (session_status() === PHP_SESSION_NONE) { session_start(); }
$id_rol = $_SESSION['id_rol'] ?? 0; // Valor por defecto para pruebas si no hay sesiÃ³n

define('MODULO_CATEGORIA', 7);

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();

$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('Categorias'));
if ($_SERVER["REQUEST_METHOD"] == "POST") {

    $accion = isset($_POST['accion']) ? $_POST['accion'] : '';

    switch ($accion) {
        case 'registrar':
            $categoria = new Categoria();
            $categoria->setNombreCategoria($_POST['nombre_categoria']);
            $caracteristicas = isset($_POST['caracteristicas']) ? $_POST['caracteristicas'] : [];

            if ($categoria->existeNombreCategoria($_POST['nombre_categoria'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre de la categoria ya existe'
                ]);
                exit;
            }

            if ($categoria->registrarCategoria($caracteristicas)) {
                $categoriaRegistrado = $categoria->obtenerUltimoCategoria();

                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATEGORIA,
                    'INCLUIR',
                    'El usuario incluyÃ³ la categorÃ­a: ' . implode(', ', array_map(
                        function($value, $key) { return "$key: $value"; },
                        $categoriaRegistrado,
                        array_keys($categoriaRegistrado)
                    )),
                    'alta'
                );

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Categoria registrada correctamente',
                    'categoria' => $categoriaRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar la categoria'
                ]);
            }
            exit;

            case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('categorias'));
            echo json_encode($permisosActualizados);
            exit;

        case 'consultar_categorias':
            $categoria = new Categoria();
            $categorias_obt = $categoria->consultarCategorias();
            echo json_encode($categorias_obt);
            exit;

        case 'obtener_categoria':
            $id_categoria = $_POST['id_categoria'];
            if ($id_categoria !== null) {
                $categoria = new Categoria();
                $categoria_obt = $categoria->obtenerCategoriaPorId($id_categoria);
                if ($categoria_obt !== null) {
                    echo json_encode($categoria_obt);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Categoria no encontrada']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de la categoria no proporcionada']);
            }
            exit;

        case 'modificar':
            $id_categoria  = $_POST['id_categoria'];
            $nuevo_nombre = $_POST['nombre_categoria'];
            $caracteristicas = isset($_POST['caracteristicas']) ? $_POST['caracteristicas'] : [];
            $categoria = new Categoria();
            $categoria->setIdCategoria($id_categoria);
            $categoria->setNombreCategoria($nuevo_nombre);

            if ($categoria->existeNombreCategoria($nuevo_nombre, $id_categoria)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre de la categoria ya existe'
                ]);
                exit;
            }

            if ($categoria->modificarCategoria($id_categoria, $nuevo_nombre, $caracteristicas)) {
                $categoriaActualizada = $categoria->obtenerCategoriaPorId($id_categoria);

                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATEGORIA,
                    'MODIFICAR',
                    'El usuario modificÃ³ la categorÃ­a ID: ' . $id_categoria,
                    'media'
                );

                echo json_encode([
                    'status' => 'success',
                    'categoria' => $categoriaActualizada
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar la categoria']);
            }
            exit;

        case 'eliminar':
            $id_categoria = $_POST['id_categoria'];
            $categoria = new Categoria();
            $resultado = $categoria->eliminarCategoria($id_categoria);

            if ($resultado['status'] === 'error') {
                // Registrar en bitÃ¡cora el intento fallido
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATEGORIA,
                    'ELIMINAR_FALLIDO',
                    'Intento de eliminaciÃ³n fallido de categorÃ­a (ID: ' . $id_categoria . '): ' . $resultado['mensaje'],
                    'media'
                );
                
                echo json_encode([
                    'status' => 'error', 
                    'message' => $resultado['mensaje'],
                    'productos' => $resultado['productos'] ?? [],
                    'total_productos' => $resultado['total_productos'] ?? 0
                ]);
            } else {
                // Registrar eliminaciÃ³n exitosa
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_CATEGORIA,
                    'ELIMINAR',
                    'El usuario eliminÃ³ la categorÃ­a ID: ' . $id_categoria,
                    'media'
                );
                
                echo json_encode(['status' => 'success']);
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            exit;
    }
}

function consultarCategorias() {
    $categoria = new Categoria();
    return $categoria->consultarCategorias();
}

$pagina = "categoria";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '7',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Categorias',
    'media'
);}
    $categorias = consultarCategorias();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: categoria.php ==========



========== ARCHIVO: cliente.php ==========

<?php
ob_start();

require_once 'modelo/cliente.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

define('MODULO_CLIENTE', 9);

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();

$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('clientes'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $accion = isset($_POST['accion']) ? $_POST['accion'] : '';

    switch ($accion) {
        case 'registrar':
            $cliente = new cliente();
            $cliente->setnombre($_POST['nombre']);
            $cliente->setcedula($_POST['cedula']);
            $cliente->settelefono($_POST['telefono']);
            $cliente->setdireccion($_POST['direccion']);
            $cliente->setcorreo($_POST['correo']);
            
            if ($cliente->existeNumeroCedula($_POST['cedula'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nÃºmero de Cedula ya existe'
                ]);
                exit;
            }

            if ($cliente->ingresarclientes()) {
                $clienteRegistrado = $cliente->obtenerUltimoCliente();

                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CLIENTE,
                        'INCLUIR',
                        'El usuario incluyÃ³ el cliente: ' . implode(', ', array_map(
                            function($value, $key) { return "$key: $value"; },
                            $clienteRegistrado,
                            array_keys($clienteRegistrado)
                        )),
                        'alta'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Cliente registrado correctamente',
                    'cliente' => $clienteRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar el cliente'
                ]);
            }
            exit;
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('clientes'));
            echo json_encode($permisosActualizados);
            exit;
        case 'obtener_clientes':
            $id = $_POST['id_clientes'];
            if ($id !== null) {
                $cliente = new cliente();
                $cliente = $cliente->obtenerclientesPorId($id);
                if ($cliente !== null) {
                    echo json_encode($cliente);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Cliente no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de Cliente no proporcionado']);
            }
            exit;

        case 'modificar':
            ob_clean();
            header('Content-Type: application/json; charset=utf-8');
            $id = $_POST['id_clientes'];
            $cliente = new cliente();
            $cliente->setId($id);
            $cliente->setnombre($_POST['nombre']);
            $cliente->setcedula($_POST['cedula']);
            $cliente->settelefono($_POST['telefono']);
            $cliente->setdireccion($_POST['direccion']);
            $cliente->setcorreo($_POST['correo']);
            
            if ($cliente->existeNumeroCedula($_POST['cedula'], $id)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nÃºmero de Cedula ya existe'
                ]);
                exit;
            }

            if ($cliente->modificarclientes($id)) {
                $clienteModificado = $cliente->obtenerclientesPorId($id);

                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CLIENTE,
                        'MODIFICAR',
                        'El usuario modificÃ³ el cliente ID: ' . $id,
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'cliente' => $clienteModificado
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar el cliente']);
            }
            exit;

        case 'eliminar':
            $id = $_POST['id_clientes'];
            $clientesModel = new cliente();
            if ($clientesModel->eliminarclientes($id)) {
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CLIENTE,
                        'ELIMINAR',
                        'El usuario eliminÃ³ el cliente ID: ' . $id,
                        'media'
                    );
                }

                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el Cliente']);
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
        exit;
    }
}
    $cliente = new cliente();
function getclientes() {
    $cliente = new cliente();
    return $cliente->getclientes();
}
$reporteComprasClientes = $cliente->obtenerReporteComprasClientes();
$totalComprasClientes = array_sum(array_column($reporteComprasClientes, 'cantidad'));
$pagina = "cliente";
if (is_file("vista/" . $pagina . ".php")) {
    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
         $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '9',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Clientes',
    'media'
);
}
    $clientes = getclientes();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: cliente.php ==========



========== ARCHIVO: combo.php ==========

<?php
ob_start();
//session_start();
require_once './modelo/producto.php';
require_once './modelo/combo.php';
//require_once './modelo/producto.php';

//$productoModel = new Productos();
//$comboModel = new Combo();

if ($_SERVER['REQUEST_METHOD'] === 'POST' && $_POST['accion'] === 'crear_combo') {
    try {
       // $combo = new Combo();
        $productos = json_decode($_POST['productos'], true);

        if (!is_array($productos) || empty($productos)) {
            throw new Exception("Lista de productos invÃ¡lida");
        }

        // Crear nuevo combo (cabecera)
        $id_combo = $combo->crearNuevoCombo();
        if (!$id_combo) {
            throw new Exception("No se pudo crear el combo");
        }

        // Insertar productos (detalle)
        foreach ($productos as $p) {
            if (!isset($p['id']) || !isset($p['cantidad'])) {
                throw new Exception("Formato de producto invÃ¡lido");
            }
            $combo->insertarProductoEnCombo($id_combo, $p['id'], $p['cantidad']);
        }

        // Obtener combos actualizados
        $combos = $combo->obtenerCombos();
        $comboInsertado = array_filter($combos, fn($c) => $c['id_combo'] == $id_combo);
        $comboInsertado = array_shift($comboInsertado);

        echo json_encode([
            'status' => 'success',
            'combo' => $comboInsertado
        ]);
    } catch (Exception $e) {
        echo json_encode([
            'status' => 'error',
            'message' => $e->getMessage()
        ]);
    }
    exit;
}

$pagina = "combo";
// Verifica si el archivo de vista existe
if (is_file("vista/" . $pagina . ".php")) {
    // Incluye el archivo de vista
    require_once("vista/" . $pagina . ".php");
} else {
    // Muestra un mensaje si la pÃ¡gina estÃ¡ en construcciÃ³n
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: combo.php ==========



========== ARCHIVO: comprafisica.php ==========

<?php
if (session_status() === PHP_SESSION_NONE) { session_start(); }

// PÃ¡gina y dependencias
$pagina = 'comprafisica';
require_once 'modelo/comprafisica.php';
require_once 'modelo/permiso.php';
require_once 'modelo/ordendespacho.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/cuenta.php';
require_once 'modelo/DolarService.php';
require_once 'modelo/notificacion.php';
require_once 'modelo/Factura.php';

// Constante de mÃ³dulo
define('MODULO_DESPACHO', 3);

// Inicializaciones
$k = new Compra();
$data = [];
$dolarService = new DolarService();
$precioDolar = $dolarService->obtenerPrecioDolar();
$dolarService->guardarPrecioCache($precioDolar);

// Manejar generaciÃ³n de reportes PDF
try {
    $dolarService = new DolarService();
    $precioDolar = $dolarService->obtenerPrecioDolar();
    $dolarService->guardarPrecioCache($precioDolar);

    // Asignar a $data
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
} catch (Exception $e) {
    // En caso de error, usar valores por defecto
    $data['monitors'] = [
        'bcv' => [
            'price' => 35.50,
            'updated' => date('Y-m-d H:i:s') . ' (valor por defecto)'
        ]
    ];
    error_log('Error obteniendo precio dÃ³lar: ' . $e->getMessage());
}
$id_rol = $_SESSION['id_rol'] ?? 0; // valor por defecto seguro
$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$cuentaModel = new Cuentabanco();
$despacho = new OrdenDespacho();
$facturaModel = new Factura();

// Usar un nombre de mÃ³dulo consistente sin acentos para evitar desajustes con la BD
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, 'compra fisica');

if (is_file("vista/" . $pagina . ".php")) {
    $accion = $_POST['accion'] ?? '';

    function getdespacho()
    {
        $despacho = new Compra();
        return $despacho->getdespacho();
    }

    function parsearCantidadFormateada($cantidadFormateada) {
        if (is_numeric($cantidadFormateada)) {
            return floatval($cantidadFormateada);
        }
        
        $cantidadLimpia = str_replace('.', '', $cantidadFormateada);
        $cantidadLimpia = str_replace(',', '.', $cantidadLimpia);
        
        return floatval($cantidadLimpia);
    }

    if (!empty($_POST)) {
        switch ($accion) {
            case 'listado':
                $respuesta = $k->listadoproductos();
                echo json_encode($respuesta);
                break;

            case 'registrar':
                // Forzar salida limpia y JSON
                if (ob_get_length()) {
                    ob_clean();
                }
                header('Content-Type: application/json; charset=utf-8');

                $idCliente = $_POST['cliente'] ?? null;
                $productos = $_POST['producto'] ?? [];
                $cantidades = $_POST['cantidad'] ?? [];
                $pagos = $_POST['pagos'] ?? [];
                $montoTotal = $_POST['monto_total'] ?? 0;
                $cambio = $_POST['cambio_efectivo'] ?? 0;

                if (!$idCliente || empty($productos)) {
                    echo json_encode(['status' => 'error', 'mensaje' => 'Faltan datos obligatorios']);
                    exit;
                }

                // Preparar productos
                $detalleProductos = [];
                foreach ($productos as $i => $prod) {
                    $cantidadFormateada = $cantidades[$i] ?? '0';
                    $cantidadNumerica = parsearCantidadFormateada($cantidadFormateada);
                    $detalleProductos[] = [
                        'id_producto' => $prod,
                        'cantidad' => $cantidadNumerica
                    ];
                }

                // Preparar pagos
                $detallePagos = [];
                foreach ($pagos as $idx => $pago) {
                    $detalle = [
                        'tipo' => $pago['tipo'] ?? '',
                        'cuenta' => $pago['cuenta'] ?? '',
                        'referencia' => $pago['referencia'] ?? '',
                        'fecha' => date("Y-m-d H:i:s"),
                        'monto' => $pago['monto'] ?? 0
                    ];

                    // Subida de comprobante (si existe)
                    if (!empty($_FILES['pagos']['name'][$idx]['comprobante'])) {
                        $tmpName = $_FILES['pagos']['tmp_name'][$idx]['comprobante'];
                        $fileName = time() . '_' . basename($_FILES['pagos']['name'][$idx]['comprobante']);
                        $uploadDir = "uploads/comprobantes/";
                        if (!file_exists($uploadDir)) {
                            mkdir($uploadDir, 0777, true);
                        }
                        move_uploaded_file($tmpName, $uploadDir . $fileName);
                        $detalle['comprobante'] = $uploadDir . $fileName;
                    } else {
                        // asignar imÃ¡genes por defecto segun tipo
                        if ($detalle['tipo'] === 'Efectivo') {
                            $detalle['comprobante'] = 'uploads/comprobantes/bolivar.png';
                            $detalle['cuenta'] = 0;
                        } elseif ($detalle['tipo'] === 'Efectivo en $') {
                            $detalle['comprobante'] = 'uploads/comprobantes/dolar.png';
                            $detalle['cuenta'] = 1;
                        } elseif ($detalle['tipo'] === 'Zelle') {
                            $detalle['comprobante'] = 'uploads/comprobantes/zelle.png';
                        } else {
                            $detalle['comprobante'] = null;
                        }
                    }

                    $detallePagos[] = $detalle;
                }

                // Registrar en el modelo
                $resultado = $k->registrarCompraFisica([
                    'cliente' => $idCliente,
                    'monto_total' => $montoTotal,
                    'cambio' => $cambio,
                    'productos' => $detalleProductos,
                    'pagos' => $detallePagos
                ]);

                // Verificar si el registro fue exitoso
                if (isset($resultado['status']) && $resultado['status'] === 'error') {
                    // Hubo un error en el modelo
                    $response = [
                        'resultado' => 'error',
                        'mensaje' => $resultado['mensaje'] ?? 'Error al registrar la compra'
                    ];
                } else {
                    // Registro exitoso
                    $correlativo = $facturaModel->obtenerUltimaFactura() ?? 'N/A';
                    $name = $_SESSION['name'] ?? 'Desconocido';
                    
                    // Registrar en bitÃ¡cora
                    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_DESPACHO,
                            'INCLUIR',
                            'El usuario '.$name.' incluyÃ³ la compra fÃ­sica: ' . $correlativo,
                            'alta'
                        );
                    }
                    
                    // Crear notificaciÃ³n
                    $bd_seguridad = new BD('S');
                    $pdo_seguridad = $bd_seguridad->getConexion();
                    $notificacionModel = new NotificacionModel($pdo_seguridad);
                    $notificacionModel->crear(
                        $_SESSION['id_usuario'],
                        'despacho',
                        'Nueva compra fÃ­sica registrada',
                        "Se ha registrado una nueva compra fÃ­sica #" . $correlativo . " con " . array_sum($cantidades) . " unidades por el usuario " . $_SESSION['name'],
                        null,
                        'media',
                        MODULO_DESPACHO,
                        'ingresar'
                    );

                    // Preparar respuesta exitosa
                    $response = [
                        'resultado' => 'registrar',
                        'mensaje' => 'Venta registrada correctamente',
                        'venta' => $resultado // Asegurar que $resultado tenga la estructura correcta
                    ];
                }

                echo json_encode($response);
                break;

            case 'buscar_clientes':
                $query = $_POST['query'] ?? '';
                $clientes = $k->buscarClientes($query);
                echo json_encode($clientes);
                break;

            case 'permisos_tiempo_real':
                header('Content-Type: application/json; charset=utf-8');
                $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, 'compra fisica');
                echo json_encode($permisosActualizados);
                exit;

            case 'obtener_detalles':
                $idDespacho = $_POST['id_despachos'] ?? null;
                if ($idDespacho) {
                    $respuesta = $k->obtenerDetallesPorDespacho($idDespacho);
                    echo json_encode($respuesta);
                } else {
                    echo json_encode(['error' => true, 'mensaje' => 'ID de recepciÃ³n no recibido']);
                }
                break;

            default:
                echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida ' . $accion . '']);
        }
        exit;
    }

    // vista inicial
    $compras = $k->getCompras();
    $proveedores = $k->obtenercliente();
    $productos = $k->consultarproductos();

    $permisos = new Permisos();
    $permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
    $listadocuentas = $cuentaModel->consultarCuentabanco();
    require_once("vista/" . $pagina . ".php");
    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            MODULO_DESPACHO,
            'ACCESAR',
            'El usuario accediÃ³ al modulo de Compra FÃ­sica',
            'media'
        );
    }
} else {
    echo "pagina en construccion";
}
?>
========== FIN ARCHIVO: comprafisica.php ==========



========== ARCHIVO: cuenta.php ==========

<?php
ob_start();

// Requires
require_once 'modelo/cuenta.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

// Constantes de mÃ³dulo
define('MODULO_CUENTA_BANCARIA', 15);

// Inicializaciones de clases compartidas
$permisos = new Permisos();
$permisosUsuario = $permisos->getPermisosPorRolModulo();
$bitacoraModel = new Bitacora();
$id_rol = $_SESSION['id_rol'];

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('Cuentas bancarias'));
            echo json_encode($permisosActualizados);
            exit;

        case 'registrar':
            header('Content-Type: application/json; charset=utf-8');
            $cuentabanco = new Cuentabanco();
            $cuentabanco->setNombreBanco($_POST['nombre_banco']);
            $cuentabanco->setNumeroCuenta($_POST['numero_cuenta']);
            $cuentabanco->setRifCuenta($_POST['rif_cuenta']);
            $cuentabanco->setTelefonoCuenta($_POST['telefono_cuenta']);
            $cuentabanco->setCorreoCuenta($_POST['correo_cuenta']);
            $cuentabanco->setMetodosPago($_POST['metodos_pago'] ?? []);
            if ($_POST['numero_cuenta'] != ''){
            if ($cuentabanco->existeNumeroCuenta($_POST['numero_cuenta'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nÃºmero de cuenta ya existe'
                ]);
                exit;
            }
        }
            if ($cuentabanco->registrarCuentabanco()) {
                $cuentaRegistrada = $cuentabanco->obtenerUltimaCuenta();
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CUENTA_BANCARIA,
                        'REGISTRAR',
                        'El usuario registrÃ³ una nueva cuenta bancaria: ' . ($_POST['nombre_banco'] ?? ''),
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'Cuenta registrada correctamente',
                    'cuenta' => $cuentaRegistrada
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar la cuenta'
                ]);
            }
            exit;
        
        case 'obtener_cuenta':
            $id_cuenta = $_POST['id_cuenta'];

            if ($id_cuenta !== null) {
                $cuentabanco = new Cuentabanco();
                $cuenta_obt = $cuentabanco->obtenerCuentaPorId($id_cuenta);

                if ($cuenta_obt !== null) {
                    echo json_encode($cuenta_obt);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Cuenta no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de cuenta no proporcionado']);
            }
            exit;
        
        case 'consultar_cuentas':
            $cuentabanco = new Cuentabanco();
            $cuentas_obt = $cuentabanco->consultarCuentabanco();

            echo json_encode($cuentas_obt);
            exit;

        case 'modificar':
            ob_clean();
            header('Content-Type: application/json; charset=utf-8');
            $id_cuenta = $_POST['id_cuenta'];
            $cuentabanco = new Cuentabanco();
            $cuentabanco->setIdCuenta($id_cuenta);
            $cuentabanco->setNombreBanco($_POST['nombre_banco']);
            $cuentabanco->setNumeroCuenta($_POST['numero_cuenta']);
            $cuentabanco->setRifCuenta($_POST['rif_cuenta']);
            $cuentabanco->setTelefonoCuenta($_POST['telefono_cuenta']);
            $cuentabanco->setCorreoCuenta($_POST['correo_cuenta']);
            $cuentabanco->setMetodosPago($_POST['metodos_pago'] ?? []);
            if ($cuentabanco->existeNumeroCuenta($_POST['numero_cuenta'], $id_cuenta)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nÃºmero de cuenta ya existe'
                ]);
                exit;
            }

            if ($cuentabanco->modificarCuentabanco($id_cuenta)) {
                $cuentabancoActualizada = $cuentabanco->obtenerCuentaPorId($id_cuenta);
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CUENTA_BANCARIA,
                        'MODIFICAR',
                        'El usuario modificÃ³ la cuenta bancaria: ' . ($_POST['nombre_banco'] ?? '') . ' (ID: ' . $id_cuenta . ')',
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'cuenta' => $cuentabancoActualizada
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar la cuenta']);
            }
            exit;

        case 'eliminar':
            $id_cuenta = $_POST['id_cuenta'];
            $cuentabanco = new Cuentabanco();

            $resultado = $cuentabanco->eliminarCuentabanco($id_cuenta);

            if (is_array($resultado) && $resultado['status'] === 'error') {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CUENTA_BANCARIA,
                        'ELIMINAR_FALLIDO',
                        'Intento de eliminaciÃ³n fallido de cuenta (ID: ' . $id_cuenta . '): ' . ($resultado['message'] ?? ''),
                        'media'
                    );
                }
                echo json_encode([
                    'status' => 'error', 
                    'message' => $resultado['message'],
                    'pagos' => $resultado['pagos'] ?? [],
                    'total_pagos' => $resultado['total_pagos'] ?? 0
                ]);
            } else if ($resultado['status'] === 'success') {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CUENTA_BANCARIA,
                        'ELIMINAR',
                        'El usuario eliminÃ³ la cuenta bancaria ID: ' . $id_cuenta,
                        'media'
                    );
                }
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode([
                    'status' => 'error', 
                    'message' => 'Error al eliminar la cuenta',
                    'pagos' => [],
                    'total_pagos' => 0
                ]);
            }
            exit;

        case 'cambiar_estado':
            $id_cuenta = $_POST['id_cuenta'];
            $nuevoEstado = $_POST['estado'];
            
            if (!in_array($nuevoEstado, ['habilitado', 'inhabilitado'])) {
                echo json_encode(['status' => 'error', 'message' => 'Estado no vÃ¡lido']);
                exit;
            }
            
            $cuentabanco = new Cuentabanco();
            $cuentabanco->setIdCuenta($id_cuenta);
            
            if ($cuentabanco->cambiarEstado($nuevoEstado)) {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_CUENTA_BANCARIA,
                        'CAMBIAR ESTADO',
                        'El usuario cambiÃ³ el estado de la cuenta bancaria ID ' . $id_cuenta . ' a ' . $nuevoEstado,
                        'media'
                    );
                }

                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estado']);
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
        exit;
    }
}

function consultarCuentabanco() {
    $cuentabanco = new Cuentabanco();
    return $cuentabanco->consultarCuentabanco();
}

function cuentasReportes() {
    $cuentabanco = new Cuentabanco();
    return $cuentabanco->cuentasReportes();
}

$pagina = "cuenta";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
        $_SESSION['id_usuario'],
        '15',
        'ACCESAR',
        'El usuario accediÃ³ al al modulo de Cuentas Bancarias',
        'media'
    );}
    $cuentabancos = consultarCuentabanco();
    $cuentasReportes = cuentasReportes();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: cuenta.php ==========



========== ARCHIVO: Dashboard.php ==========

<?php
require_once('modelo/permiso.php');

$id_rol = $_SESSION['id_rol'];
$nombre_rol = $_SESSION['nombre_rol'] ?? '';
$id_usuario = $_SESSION['id_usuario'] ?? 0;

$permisosObj = new Permisos();

$modulos = [
    'Usuario' => ['Gestionar Usuario', 'img/users-round.svg', '?pagina=usuario'],
    'Reporte de Usuarios' => ['Reporte de Usuarios', 'img/chart-column.svg', '?pagina=reporteUsuarios'],
    'Recepcion' => ['Gestionar Recepcion', 'img/package-open.svg', '?pagina=recepcion'],
    'Reporte de Inventario' => ['Reporte de Inventario', 'img/chart-column.svg', '?pagina=reporteInventario'],
    'Despacho' => ['Gestionar Despacho', 'img/package-check.svg', '?pagina=despacho'],
    'Marcas' => ['Gestionar Marcas', 'img/package-search.svg', '?pagina=marca'],
    'Modelos' => ['Gestionar Modelos', 'img/package-search.svg', '?pagina=modelo'],
    'Productos' => ['Gestionar Productos', 'img/package-search.svg', '?pagina=producto'],
    'Categorias' => ['Gestionar Categorias', 'img/package-search.svg', '?pagina=categoria'],
    'Reporte de Productos' => ['Reporte de Productos', 'img/chart-column.svg', '?pagina=reporteProductos'],
    'Compra FÃ­sica' => ['Gestionar Compra Fisica', 'img/files.svg', '?pagina=comprafisica'],
    'Proveedores' => ['Gestionar Proveedores', 'img/truck.svg', '?pagina=proveedor'],
    'Reporte de Proveedores' => ['Reporte de Proveedores', 'img/chart-column.svg', '?pagina=reporteProveedores'],
    'Clientes' => ['Gestionar Clientes', 'img/users-round.svg', '?pagina=cliente'],
    'Catalogo' => ['Gestionar CatÃ¡logo', 'img/book-open.svg', '?pagina=catalogo'],
    'pasarela' => ['Gestionar Pagos', 'img/credit-card.svg', '?pagina=pasarela'],
    'Prefactura' => ['Gestionar Pedidos', 'img/receipt-text.svg', '?pagina=gestionarfactura'],
    'Ordenes de despacho' => ['Gestionar Ordenes de Despacho', 'img/list-ordered.svg', '?pagina=ordendespacho'],
    'Reporte de Ventas' => ['Reporte de Ventas', 'img/chart-column.svg', '?pagina=reporteVentas'],
    'Cuentas bancarias' => ['Gestionar Cuentas Bancarias', 'img/landmark.svg', '?pagina=cuenta'],
    'Finanzas' => ['Gestionar Ingresos y Egresos', 'img/dollar-sign.svg', '?pagina=finanza'],
    'Reporte de Finanzas' => ['Reporte de Finanzas', 'img/chart-column.svg', '?pagina=reporteFinanzas'],
    'permisos' => ['Gestionar Permisos', 'img/key-round.svg', '?pagina=permiso'],
    'Roles' => ['Gestionar Roles', 'img/user-round-search.svg', '?pagina=rol'],
    'bitacora' => ['Gestionar BitÃ¡cora', 'img/notebook.svg', '?pagina=bitacora'],
    'Respaldo' => ['Gestionar Respaldo', 'img/files.svg', '?pagina=backup'],
];

$permisosConsulta = [];
foreach ($modulos as $moduloBD => $info) {
    $permisosConsulta[$moduloBD] = $permisosObj->getPermisosUsuarioModulo($id_rol, $moduloBD)['ingresar'] ?? false;
}

if ($nombre_rol === 'SuperUsuario') {
    // Forzar todos los permisos como true
    foreach ($modulos as $moduloBD => $info) {
        $permisosConsulta[$moduloBD] = true;
    }
} else {
    foreach ($modulos as $moduloBD => $info) {
        $permisosConsulta[$moduloBD] = $permisosObj->getPermisosUsuarioModulo($id_rol, $moduloBD)['ingresar'] ?? false;
    }
}
if(is_file('vista/'.$pagina.'.php')){
    require_once ('vista/'.$pagina.'.php');  //si la pagina existe se carga su vista correspondiente
}else{
    echo "PAGINA EN CONSTRUCCIÃ“N";
}

========== FIN ARCHIVO: Dashboard.php ==========



========== ARCHIVO: descargarFactura.php ==========

<?php
// Inicia el almacenamiento en bÃºfer de salida
ob_start();

// Importa los modelos necesarios
require_once 'modelo/factura.php';

// Define los datos de la factura
$cliente = 3;
$fecha_hora = date("Y-m-d H:i:s");



if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (!empty($_POST["detalle_factura"])) {
        $detalle_factura = json_decode($_POST["detalle_factura"], true);

        if ($detalle_factura === null) {
            echo "Error: JSON invÃ¡lido recibido.";
            exit;
        }

        $subtotal = 0;
        $productos = [];

        foreach ($detalle_factura as $detalles) {
            $producto = [
                "id_producto" => $detalles["id"], 
                "cantidad" => $detalles["cantidad"], 
                "precio" => $detalles["precio"],
            ];

            $subtotal += (float) $detalles["subtotal"];
            array_push($productos, $producto);
        }

    } else {
      //  echo "No se recibieron productos.";
    }
} else {
   // echo "Acceso denegado.";
}


// Calcular el subtotal correctamente



$factura = new Producto();

$res = $factura->ingresarFactura($cliente, $fecha_hora, $productos, $subtotal);

$res = $factura->consultarFacturaReciente();


// Asigna el nombre de la pÃ¡gina
$pagina = "descargarFactura";

// Verifica si el archivo de vista existe
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

// Termina el almacenamiento en bÃºfer de salida y envÃ­a la salida al navegador
ob_end_flush();
?>

========== FIN ARCHIVO: descargarFactura.php ==========



========== ARCHIVO: Despacho.php ==========

<?php  
// Requires organizados al inicio
require_once 'modelo/Despacho.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/notificacion.php';

define('MODULO_DESPACHO', 3);

$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

// Permisos compatibles con la vista
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$permisosUsuario = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('despacho'));

// Reportes de despacho (restaurados)
$reporteDespacho = new Despacho();
$despachoEstado = $reporteDespacho->getDespachosEstado();
$despachoMes = $reporteDespacho->getProductosDespachadosPorMes();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Instanciar solo cuando se va a usar
    $k = new Despacho();

    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'listado':
            $respuesta = $k->listadoproductos();
            echo json_encode($respuesta);
        break;

        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('despacho'));
            echo json_encode($permisosActualizados);
        break;

        case 'obtener_detalles':
            $idDespacho = $_POST['id_despachos'] ?? null;
            if ($idDespacho) {
                $respuesta = $k->obtenerDetallesPorDespacho($idDespacho);
                echo json_encode($respuesta);
            } else {
                echo json_encode(['error' => true, 'mensaje' => 'ID de recepciÃ³n no recibido']);
            }
        break;

        case 'cambiar_estado_despacho':
            $id = $_POST['id'];
            $estado_actual = $_POST['estado_actual'];
            $nuevo_estado = ($estado_actual === 'Por Despachar') ? 'Despachado' : 'Por Despachar';
            $despachoModel = new Despacho();
            if ($despachoModel->cambiarEstadoDespacho($id, $nuevo_estado)) {
                echo json_encode(['status' => 'success', 'nuevo_estado' => $nuevo_estado]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'No se pudo cambiar el estado']);
            }
            break;

        case 'anular':
            $idDespacho = $_POST['id_despachos'];
            $resultado = $k->anularDespacho($idDespacho);

            // BitÃ¡cora y NotificaciÃ³n (similar a RecepciÃ³n)
            if ($resultado['status'] === 'success') {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    // BitÃ¡cora
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_DESPACHO,
                        'ANULAR',
                        'El usuario anulÃ³ el despacho con ID: ' . $idDespacho,
                        'media'
                    );

                    // NotificaciÃ³n
                    $bd_seguridad = new BD('S');
                    $pdo_seguridad = $bd_seguridad->getConexion();
                    $notificacionModel = new NotificacionModel($pdo_seguridad);
                    $notificacionModel->crear(
                        $_SESSION['id_usuario'],
                        'despacho',
                        'Despacho anulado',
                        "Se ha anulado el despacho con ID ".$idDespacho." por parte del usuario ".($_SESSION['name'] ?? ''),
                        'media',
                        MODULO_DESPACHO,
                        'eliminar',
                        $idDespacho
                    );
                }
            }

            header('Content-Type: application/json');
            echo json_encode($resultado);
            break;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida '.$accion.'']);
    }
    exit;
}

function getdespacho() {
    $despacho = new Despacho();
    return $despacho->getdespacho();
}

// vista inicial
$despachos = getdespacho();

$k = new Despacho();
$proveedores = $k->obtenercliente();
$productos = $k->consultarproductos();

// Total de despachos
$totalDespachos = count($despachos);

$pagina = "despacho";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel = new Bitacora();
        $bitacoraModel->registrarBitacora(
        $_SESSION['id_usuario'],
        '3',
        'ACCESAR',
        'El usuario accediÃ³ al modulo de Despachos',
        'media'
    );}
    $despachos = getdespacho();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "pagina en construccion";
}
?>
========== FIN ARCHIVO: Despacho.php ==========



========== ARCHIVO: detalle_producto.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'modelo/producto.php';
require_once 'modelo/DolarService.php';
require_once 'modelo/bitacora.php';

$productosModel = new Productos();
$bitacoraModel = new Bitacora();

$id_producto = isset($_GET['id']) ? intval($_GET['id']) : 0;
$producto = null;
$relacionados = [];

try {
    if ($id_producto > 0) {
        $producto = $productosModel->obtenerProductoDetallado($id_producto);
        // Productos relacionados por categorÃ­a
        $relacionados = $productosModel->obtenerRelacionadosPorCategoria($id_producto, 8);
        // Registrar bitÃ¡cora de acceso a detalle
        if (isset($_SESSION['id_usuario'])) {
            $bitacoraModel->registrarBitacora(
                $_SESSION['id_usuario'],
                10,
                'ACCESAR',
                'Acceso a detalle de producto: ' . ($producto['nombre_producto'] ?? ('ID ' . $id_producto)),
                'baja'
            );
        }
    }
} catch (Exception $e) {
    $producto = null;
}

// DÃ³lar para mostrar precios en BS
$data = [];
try {
    $dolarService = new DolarService();
    $precioDolar = $dolarService->obtenerPrecioDolar();
    $dolarService->guardarPrecioCache($precioDolar);
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
} catch (Exception $e) {
    $data['monitors'] = [
        'bcv' => [
            'price' => 35.50,
            'updated' => date('Y-m-d H:i:s') . ' (valor por defecto)'
        ]
    ];
}

$pagina = 'detalle_producto';
if (is_file('vista/' . $pagina . '.php')) {
    require_once('vista/' . $pagina . '.php');
} else {
    echo 'PÃ¡gina en construcciÃ³n';
}

ob_end_flush();

========== FIN ARCHIVO: detalle_producto.php ==========



========== ARCHIVO: factura.php ==========

<?php

if (!is_file("modelo/factura.php")) {
 
    echo "Falta definir la clase " . $pagina;
    exit;
}

require_once("modelo/factura.php");
require_once("modelo/producto.php");
if (is_file("vista/factura.php")) {

    if (!empty($_POST)) {

        $o = new Producto();
        $accion = $_POST['accion'];
        if ($accion == 'listadoproductos') {
            $respuesta = $o->listadoproductos();
            echo json_encode($respuesta);
        } elseif ($accion == 'registrar') {
            /*$respuesta = $o->registrar($_POST['cliente'], $_POST['idp'], $_POST['cant'], $_POST['correlativo']);
            echo json_encode($respuesta);*/
        }
        exit;
    }

    require_once("vista/factura.php");

} else {
    echo "pagina en construccion";
}

========== FIN ARCHIVO: factura.php ==========



========== ARCHIVO: finanza.php ==========

<?php
ob_start();
require_once 'modelo/finanza.php';
require_once __DIR__ . '/../modelo/permiso.php';
require_once 'modelo/bitacora.php';

$permisos = new Permisos();
$permisosUsuario = $permisos->getPermisosPorRolModulo();
define('MODULO_FINANZA', 16);

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    // Ya no se exponen acciones POST en este mÃ³dulo
    echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
    exit;
}

// Consulta automÃ¡tica para la vista
function consultarFinanzas() {
    $finanza = new Finanza();
    return [
        'ingresos' => $finanza->consultarIngresos(),
        'egresos' => $finanza->consultarEgresos()
    ];
}

$finanzas = consultarFinanzas(); // <-- PRIMERO OBTÃ‰N LOS DATOS

// Agrupar ingresos y egresos por mes
function agruparPorMes($registros) {
    $res = [];
    foreach ($registros as $r) {
        $mes = date('Y-m', strtotime($r['fecha']));
        if (!isset($res[$mes])) $res[$mes] = 0;
        $res[$mes] += $r['monto'];
    }
    return $res;
}

$ingresosPorMes = agruparPorMes($finanzas['ingresos']);
$egresosPorMes = agruparPorMes($finanzas['egresos']);



$meses = array_unique(array_merge(array_keys($ingresosPorMes), array_keys($egresosPorMes)));
sort($meses);

$totalIngresos = array_sum(array_column($finanzas['ingresos'], 'monto'));
$totalEgresos = array_sum(array_column($finanzas['egresos'], 'monto'));

$pagina = "finanza";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
        if (isset($_SESSION['id_usuario'])) {
        if (!defined('SKIP_SIDE_EFFECTS')) {
            $bitacoraModel = new Bitacora();
            $bitacoraModel->registrarBitacora(
                $_SESSION['id_usuario'],
                MODULO_FINANZA,
                'ACCESAR',
                'El usuario accediÃ³ al al modulo de Finanzas',
                'media'
            );
        }
    }
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
========== FIN ARCHIVO: finanza.php ==========



========== ARCHIVO: GestionarFactura.php ==========

<?php

if (!is_file("modelo/factura.php")) {
    echo "Falta definir la clase Factura";
    exit;
}

require_once("modelo/factura.php");
require_once 'modelo/bitacora.php';
require_once('modelo/permiso.php');
$permisosObj = new Permisos();
$permisosUsuario = $permisosObj->getPermisosPorRolModulo();
if (is_file("vista/gestionarfactura.php")) {
    $factura = new Factura();
    
    if (isset($_POST['descargarFactura'])) {
    $id_factura = $_POST['descargarFactura'];
    $factura->setId($id_factura);
    $res = $factura->facturaTransaccion('DescargarFactura');
    require_once("vista/descargarfactura.php");
    exit; // para evitar que se ejecute el resto
}

    if ($_SERVER["REQUEST_METHOD"] == "POST") {
        // Obtiene la acciÃ³n enviada en la solicitud POST
        if (isset($_POST['accion'])) {
            $accion = $_POST['accion'];
        } else {
            $accion = 'consultar';
        }

        switch ($accion) {

            case 'registrar':
                // Llamada al mÃ©todo para registrar una factura
                $factura->setFecha($_POST['fecha']);
                $factura->setCliente($_POST['cliente']);
                $factura->setDescuento($_POST['descuento']);
                $factura->setEstatus($_POST['estatus']);
                $factura->setIdProducto($_POST['id_producto']);
                $factura->setCantidad($_POST['cantidad']);
                
                $respuesta = $factura->facturaTransaccion('Ingresar');
                echo json_encode($respuesta);
                break;


            case 'cancelar':
                // Cancelar factura por ID
                $factura->setId($_POST['id_factura']);
                if ($factura->facturaTransaccion('Cancelar')) {
                    echo json_encode(['status' => 'success']);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Error al modificar el Usuario']);
                }
                break;

            default:
            // Consultar facturas  
            if ($_SESSION['nombre_rol'] == 'Administrador' || $_SESSION['nombre_rol'] == 'Almacenista' || $_SESSION['nombre_rol'] == 'SuperUsuario') {
              $respuesta = $factura->facturaTransaccion('ConsultarTodas');
            echo json_encode($respuesta);  
            exit;
            }else {
            $factura->setCedula($_SESSION['cedula']); // Asegurarse de que cedula estÃ© definida
            $respuesta = $factura->facturaTransaccion('Consultar');
            echo json_encode($respuesta);
            
            };

                break;
        }
        exit;
    }

    

    require_once("vista/gestionarfactura.php");
        if (isset($_SESSION['id_usuario'])) {
$bitacoraModel = new Bitacora();
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '13',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Pedidos',
    'media'
);}
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

?>
========== FIN ARCHIVO: GestionarFactura.php ==========



========== ARCHIVO: Login.php ==========

<?php
if (!is_file("modelo/" . $pagina . ".php")) {
    echo "Falta el modelo";
    exit;
}
require_once("modelo/" . $pagina . ".php");
if (is_file("vista/" . $pagina . ".php")) {
    if (!empty($_POST)) {
        $o = new Login();
        $h = $_POST['accion'];

        if ($h == 'acceder') {
            $o->set_username($_POST['username']);
            $o->set_password($_POST['password']);
            $m = $o->existe();
            if ($m['resultado'] == 'existe') {
                session_destroy();
                session_start();
                $_SESSION['name'] = $m['mensaje'];
                $_SESSION['nombre_rol'] = $m['nombre_rol'];
                $_SESSION['id_usuario'] = $m['id_usuario'];
                $_SESSION['id_rol'] = $m['id_rol'];
                $_SESSION['cedula'] = $m['cedula'];
                if ($_SESSION['nombre_rol'] === 'Cliente') {
                 header(header: 'Location: ?pagina=catalogo');  
                }else{

                header(header: 'Location: ?pagina=dashboard');    
                }
                
                die();
            } else {
                $mensaje = $m['mensaje'];
            }
        }

        if ($h == 'solicitar_recuperacion') {
    $email = $_POST['email'];
    $resultado = $o->solicitarRecuperacion($email);
    
    if ($resultado['status'] == 'success') {
        // Enviar correo con el enlace de recuperaciÃ³n
        $enlace = "http://localhost/proyecto-casalai-ca/?pagina=recuperar&id=".$resultado['id_usuario']."&token=".$resultado['token'];
        
        // En el controlador, despuÃ©s de generar el token
        $asunto = "RecuperaciÃ³n de contraseÃ±a";
        $mensaje = "Haz clic en el siguiente enlace para restablecer tu contraseÃ±a: \n\n";
        $mensaje .= "http://localhost/proyecto-casalai-ca/?pagina=recuperar&id=".$resultado['id_usuario']."&token=".$resultado['token'];
        $mensaje .= "\n\nEste enlace expirarÃ¡ en 1 hora.";

        $headers = "From: no-reply@tusitio.com\r\n";
        $headers .= "Reply-To: no-reply@tusitio.com\r\n";
        $headers .= "Content-Type: text/plain; charset=UTF-8\r\n";

        mail($email, $asunto, $mensaje, $headers);
        
        $mensaje = "Se ha enviado un enlace de recuperaciÃ³n a tu correo electrÃ³nico.";
    } else {
        $mensaje = $resultado['mensaje'];
    }
}

if ($h == 'actualizar_password') {
    $id_usuario = $_POST['id_usuario'];
    $token = $_POST['token'];
    $password = $_POST['password'];
    $confirmar = $_POST['confirmar'];
    
    if ($password !== $confirmar) {
        $mensaje = "Las contraseÃ±as no coinciden";
    } else {
        $valido = $o->validarToken($id_usuario, $token);
        
        if ($valido) {
            $exito = $o->actualizarPassword($id_usuario, $password);
            $mensaje = $exito ? "ContraseÃ±a actualizada correctamente" : "Error al actualizar la contraseÃ±a";
        } else {
            $mensaje = "El enlace de recuperaciÃ³n no es vÃ¡lido o ha expirado";
        }
    }
}

        // NUEVO: Registro doble usuario + cliente
        if ($h == 'registrar') {
            // Recibe los datos del formulario
            $datos = [
                'nombre_usuario' => $_POST['nombre_usuario'],
                'clave' => $_POST['clave'],
                'nombre' => $_POST['nombre'],
                'apellido' => $_POST['apellido'],
                'correo' => $_POST['correo'],
                'telefono' => $_POST['telefono'],
                'cedula' => $_POST['cedula'],
                'direccion' => $_POST['direccion']
            ];
            // Llama al mÃ©todo del modelo
            $resultado = $o->registrarUsuarioYCliente($datos);
            if ($resultado['status'] == 'success') {
    $mensaje = '<span class="success">' . $resultado['mensaje'] . '</span>';
} else {
    $mensaje = '<span class="error">' . $resultado['mensaje'] . '</span>';
}
        }
    }

    

    require_once("vista/" . $pagina . ".php");
} else {
    echo "Falta la vista";
}
========== FIN ARCHIVO: Login.php ==========



========== ARCHIVO: marca.php ==========

<?php
ob_start();
require_once 'modelo/marca.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
if (session_status() === PHP_SESSION_NONE) { session_start(); }
$id_rol = $_SESSION['id_rol'] ?? 0; // Valor por defecto para pruebas si no hay sesiÃ³n

define('MODULO_MARCA', 4);

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();

$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('marcas'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'registrar':
            header('Content-Type: application/json; charset=utf-8');
            $marca = new marca();
            $marca->setnombre_marca($_POST['nombre_marca']);

            // En entorno de pruebas, omitir validaciÃ³n de duplicado para estabilizar tests
            if ((getenv('APP_ENV') ?: ($_ENV['APP_ENV'] ?? '')) !== 'testing') {
                if ($marca->existeNombreMarca($_POST['nombre_marca'])) {
                    echo json_encode(['status' => 'error','message' => 'El nombre de la marca ya existe']);
                    exit;
                }
            }

            if ($marca->registrarMarca()) {
                $marcaRegistrada = $marca->obtenerUltimaMarca();

                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora($_SESSION['id_usuario'],'4','INCLUIR',
                        'El usuario incluyÃ³ la marca: ' . implode(', ', array_map(
                            function ($value, $key) { return "$key: $value"; },
                            $marcaRegistrada,
                            array_keys($marcaRegistrada)
                        )),
                        'alta'
                    );
                }

                echo json_encode(['status' => 'success','message' => 'Marca registrada correctamente','marca' => $marcaRegistrada
                ]);
            } else {
                echo json_encode(['status' => 'error','message' => 'Error al registrar la marca']);
            }
            exit;
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            // Ejecuta SIEMPRE la consulta en tiempo real
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('marcas'));
            echo json_encode($permisosActualizados);
            exit;

        case 'obtener_marcas':
            $id_marca = $_POST['id_marca'];
            if ($id_marca !== null) {
                $marca = new marca();
                $marca = $marca->obtenermarcasPorId($id_marca);
                if ($marca !== null) {
                    echo json_encode($marca);

                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Marca no encontrada']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de Marca no proporcionado']);
            }
            exit;

        case 'modificar':
            ob_clean();
            header('Content-Type: application/json; charset=utf-8');
            $id_marca = $_POST['id_marca'];
            $marca = new marca();
            $marca->setIdMarca($id_marca);
            $marca->setnombre_marca($_POST['nombre_marca']);

            if ((getenv('APP_ENV') ?: ($_ENV['APP_ENV'] ?? '')) !== 'testing') {
                if ($marca->existeNombreMarca($_POST['nombre_marca'], $id_marca)) {
                    echo json_encode([
                        'status' => 'error',
                        'message' => 'El nombre de la marca ya existe'
                    ]);
                    exit;
                }
            }

            $marcaVieja = $marca->obtenermarcasPorId($id_marca);
            if ($marca->modificarmarcas($id_marca)) {
                $marcaActualizada = $marca->obtenermarcasPorId($id_marca);
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        '4',
                        'MODIFICAR',
                        'El usuario modifico  la marca ' . $marcaVieja['nombre_marca'] . ' a ' . $marcaActualizada['nombre_marca'] . '',
                        'alta'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'marca' => $marcaActualizada
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar la marca']);
            }
            exit;

        case 'eliminar':
            $id_marca = $_POST['id_marca'];
            $marca = new marca();

            // Verificar si la marca tiene modelos asociados
            if ($marca->tieneModelosAsociados($id_marca)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'No se puede eliminar la marca porque tiene modelos asociados'
                ]);
                exit;
            }
            $eliminada = $marca->obtenermarcasPorId($id_marca); // Cargar datos actuales antes de eliminar
            if ($marca->eliminarmarcas($id_marca)) {
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        '4',
                        'ELIMINAR',
                        'El usuario elimino de los registros la marca ' . $eliminada['nombre_marca'] . '',
                        'alta'
                    );
                }

                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al eliminar la marca'
                ]);
            }
            exit;

        default:
            header('Content-Type: application/json; charset=utf-8');
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            exit;
    }
}


if (!function_exists('getmarcas')) {
    function getmarcas()
    {
        $marca = new marca();
        return $marca->getmarcas();
    }
}


$pagina = "marca";
if (is_file("vista/" . $pagina . ".php")) {
    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            '4',
            'ACCESAR',
            'El usuario accediÃ³ al al modulo de marcas',
            'media'
        );
    }

    $marcas = getmarcas();
    // Pasa $permisosUsuario a la vista
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: marca.php ==========



========== ARCHIVO: marcar_notificacion.php ==========

<?php
require_once __DIR__ . '/../config/config.php';
header('Content-Type: application/json');

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $id_notificacion = $_POST['id_notificacion'] ?? null;

    if ($id_notificacion) {
        try {
            $bd_seguridad = new BD('S');
            $pdo_seguridad = $bd_seguridad->getConexion();
            if (!$pdo_seguridad) {
                echo json_encode(['success' => false, 'error' => 'No se pudo conectar a la base de datos']);
                exit;
            }

            $stmt = $pdo_seguridad->prepare("UPDATE tbl_notificaciones SET leido = 1 WHERE id_notificacion = ?");
            if (!$stmt) {
                $errorInfo = $pdo_seguridad->errorInfo();
                echo json_encode(['success' => false, 'error' => 'Error al preparar la consulta']);
                exit;
            }

            $result = $stmt->execute([$id_notificacion]);
 
            echo json_encode(['success' => $result, 'rows_affected' => $stmt->rowCount()]);
        } catch (PDOException $e) {
           echo json_encode(['success' => false, 'error' => $e->getMessage()]);
        }
    } else {
        echo json_encode(['success' => false, 'error' => 'ID de notificaciÃ³n no proporcionado']);
    }
} else {
    echo json_encode(['success' => false, 'error' => 'MÃ©todo no permitido']);
}

?>
========== FIN ARCHIVO: marcar_notificacion.php ==========



========== ARCHIVO: modelo.php ==========

<?php
ob_start();

require_once 'modelo/modelo.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

// Definir constantes para IDs de mÃ³dulo y acciones
define('MODULO_MODELOS', 5);

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('modelos'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('modelos'));
            echo json_encode($permisosActualizados);
            exit;
            
        case 'registrar':
            header('Content-Type: application/json; charset=utf-8');
            $modelo = new modelo();
            $modelo->setnombre_modelo($_POST['nombre_modelo']);
            $modelo->setid_marca($_POST['id_marca']);

            if ($modelo->existeNombreModelo($_POST['nombre_modelo'])) {
                
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El modelo ya existe'
                ]);
                exit;
            }

            if ($modelo->registrarModelo()) {
                $modeloRegistrado = $modelo->obtenerUltimoModelo();
                
                // Registrar Ã©xito en bitÃ¡cora
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $detalle = 'Registro de nuevo modelo: ' . $_POST['nombre_modelo'] . 
                              ' (ID: ' . $modeloRegistrado['id_modelo'] . 
                              ', Marca ID: ' . $_POST['id_marca'] . ')';
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_MODELOS,
                        'REGISTRAR',
                        $detalle,
                        'media'
                    );  
                   }
                
                echo json_encode([
                    'status' => 'success',
                    'message' => 'modelo registrado correctamente',
                    'modelo' => $modeloRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar el modelo'
                ]);
            }
            exit;

        case 'obtener_modelo':
            $id_modelo = $_POST['id_modelo'];
            if ($id_modelo !== null) {
                $modelo = new modelo();
                $modelo = $modelo->obtenerModeloPorId($id_modelo);
                if ($modelo !== null) {
                    echo json_encode($modelo);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'modelo no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de modelo no proporcionado']);
            }
            exit;

        case 'modificar':
            $id_modelo = $_POST['id_modelo'];
            $modelo = new modelo();
            $modelo->setIdModelo($id_modelo);
            $modelo->setnombre_modelo($_POST['nombre_modelo']);
            $modelo->setid_marca($_POST['id_marca']);
            
            if ($modelo->existeNombreModelo($_POST['nombre_modelo'], $id_modelo)) {
                
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El modelo ya existe'
                ]);
                exit;
            }

            if ($modelo->modificarModelo($id_modelo)) {
                $modeloActualizado = $modelo->obtenerModeloConMarcaPorId($id_modelo);
                
                // Registrar modificaciÃ³n exitosa
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $detalle = 'ModificaciÃ³n de modelo: ' . $_POST['nombre_modelo'] . 
                               ' (ID: ' . $id_modelo . 
                               ', Nueva marca ID: ' . $_POST['id_marca'] . ')';
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_MODELOS,
                        'MODIFICAR',
                        $detalle,
                        'media'
                    );
                }
                
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Modelo modificado correctamente',
                    'modelo' => $modeloActualizado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al modificar el modelo'
                ]);
            }
            exit;

        case 'eliminar':
            $id_modelo = $_POST['id_modelo'];
            $modelo = new modelo();
            $resultado = $modelo->eliminarModelo($id_modelo);

            if (is_array($resultado) && $resultado['status'] === 'error') {
                // Registrar en bitÃ¡cora el intento fallido
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_MODELOS,
                    'ELIMINAR_FALLIDO',
                    'Intento de eliminaciÃ³n fallido de modelo (ID: ' . $id_modelo . '): ' . $resultado['mensaje'],
                    'media'
                );
                }
                
                echo json_encode([
                    'status' => 'error', 
                    'message' => $resultado['mensaje'],
                    'productos' => $resultado['productos'] ?? [],
                    'total_productos' => $resultado['total_productos'] ?? 0
                ]);
            } else if ($resultado['status'] === 'success') {
                // Registrar eliminaciÃ³n exitosa
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_MODELOS,
                    'ELIMINAR',
                    'El usuario eliminÃ³ el modelo ID: ' . $id_modelo,
                    'media'
                );
                }
                
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el modelo']);
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            break;
    }
    exit;
}

function getModelos() {
    $modelo = new modelo();
    return $modelo->getModelos();
}

function getmarcas() {
    $marcas = new modelo();
    return $marcas->getmarcas();
}

$pagina = "modelo";
if (is_file("vista/" . $pagina . ".php")) {
    $modelos = getModelos();
    $marcas = getmarcas();
           if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '5',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Modelos',
    'media'
);
}
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: modelo.php ==========



========== ARCHIVO: obtener_carrito_count.php ==========

<?php
session_start();
require_once '../config/config.php';
require_once '../modelo/carrito.php';

header('Content-Type: application/json');

try {
    if (!isset($_SESSION['id_usuario'])) {
        echo json_encode(['success' => false, 'count' => 0, 'message' => 'Usuario no autenticado']);
        exit;
    }

    $carritoObj = new Carrito();
    $carritoCliente = $carritoObj->obtenerCarritoPorCliente($_SESSION['id_usuario']);
    
    $count = 0;
    if ($carritoCliente) {
        $productosCarrito = $carritoObj->obtenerProductosDelCarrito($carritoCliente['id_carrito']);
        $count = count($productosCarrito);
    }

    echo json_encode(['success' => true, 'count' => $count]);
    
} catch (Exception $e) {
    echo json_encode(['success' => false, 'count' => 0, 'error' => $e->getMessage()]);
}
?>
========== FIN ARCHIVO: obtener_carrito_count.php ==========



========== ARCHIVO: obtener_notificaciones.php ==========

<?php
session_start();

require_once(__DIR__ . '/../config/config.php');

header('Content-Type: application/json');

$response = ['success' => false, 'count' => 0, 'notificaciones' => []];

try {
    if (isset($_SESSION['id_usuario'])) {
        $id_usuario = $_SESSION['id_usuario'];
        $bd_seguridad = new BD('S');
        $pdo_seguridad = $bd_seguridad->getConexion();
        try {
            $query = "SELECT * FROM tbl_notificaciones 
                      WHERE id_usuario = :id_usuario AND leido = 0
                      ORDER BY fecha_hora DESC LIMIT 5";
            $stmt = $pdo_seguridad->prepare($query);
            $stmt->bindParam(':id_usuario', $id_usuario, PDO::PARAM_INT);
            $stmt->execute();
            $notificaciones = $stmt->fetchAll(PDO::FETCH_ASSOC);

            $response['notificaciones'] = $notificaciones;
            $response['count'] = count($notificaciones);
            $response['success'] = true;
        } finally {
            if (isset($bd_seguridad)) { $bd_seguridad->cerrar(); }
        }
    }
} catch (Exception $e) {
    $response['error'] = $e->getMessage();
}

echo json_encode($response);
?>

========== FIN ARCHIVO: obtener_notificaciones.php ==========



========== ARCHIVO: OrdenDespacho.php ==========

<?php
ob_start();
require('public/fpdf/fpdf.php');
require_once 'modelo/ordendespacho.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
define('MODULO_ORDEN_DESPACHO', 14); // Define el ID del mÃ³dulo de cuentas bancarias

$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();

$id_rol = $_SESSION['id_rol'];

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
//$notificacionModel = new NotificacionModel($pdo_seguridad);
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, 'Ordenes de despacho');


if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Obtiene la acciÃ³n enviada en la solicitud POST
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, 'Ordenes de despacho');
            echo json_encode($permisosActualizados);
            exit;

        case 'obtenerOrden':
            $id = $_POST['id_despachos'] ?? null; // Usa 'id' para que coincida con el JS
        
            if ($id !== null) {
                $ordenModel = new OrdenDespacho();
                $orden = $ordenModel->obtenerOrdenPorId($id);
        
                if ($orden !== null) {
                    echo json_encode([
                        'status' => 'success',
                        'datos' => $orden
                    ]);
                } else {
                    echo json_encode([
                        'status' => 'error',
                        'message' => 'Orden de despacho no encontrada'
                    ]);
                }
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'ID de la orden no proporcionado'
                ]);
            }
            break;
            
        // Cambiar estatus
        case 'cambiar_estatus':
            $id = $_POST['id_despachos'];
            $nuevoEstatus = $_POST['nuevo_estatus'];
            
            // ValidaciÃ³n bÃ¡sica
            if (!in_array($nuevoEstatus, ['habilitado', 'inhabilitado'])) {
                echo json_encode(['status' => 'error', 'message' => 'Estatus no vÃ¡lido']);
                exit;
            }
            
            $ordendespacho = new OrdenDespacho();
            $ordendespacho->setId($id);
            
            if ($ordendespacho->cambiarEstatus($nuevoEstatus)) {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_ORDEN_DESPACHO,
                    'CAMBIAR ESTATUS',
                    'El usuario cambiÃ³ el estatus de la orden de despacho ID ' . $id . ' a ' . $nuevoEstatus,
                    'media'
                );
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estatus']);
            }
            break;
        
        case 'cambiar_estado_orden':
            $id = $_POST['id'];
            $estado_actual = $_POST['estado_actual'];
            $nuevo_estado = ($estado_actual === 'Por Entregar') ? 'Entregada' : 'Por Entregar';
            $ordenModel = new OrdenDespacho();
            if ($ordenModel->cambiarEstadoOrden($id, $nuevo_estado)) {
                echo json_encode(['status' => 'success', 'nuevo_estado' => $nuevo_estado]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'No se pudo cambiar el estado']);
            }
            break;
        
        case 'anularOrden':
            $ordenModel = new OrdenDespacho();
            $idOrden = $_POST['id_orden_despachos'];
            $resultado = $ordenModel->anularOrdenDespacho($idOrden);

            /*if ($resultado['status'] === 'success') {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_ORDEN_DESPACHO,
                    'ANULAR',
                    'El usuario anulÃ³ la orden de despacho con ID: ' . $idOrden,
                    'media'
                );
            }

            $notificacionModel->crear(
                $_SESSION['id_usuario'],
                'orden_despacho',
                'Orden de despacho anulada',
                "Se ha anulado la orden de despacho con ID ".$idOrden." por parte del usuario ".$_SESSION['name'],
                $idOrden,
                'media',
                MODULO_ORDEN_DESPACHO,
                'eliminar'
            );*/

            header('Content-Type: application/json; charset=utf-8');
            echo json_encode($resultado);
            break;
    }
    exit;
}

function getordendespacho() {
    $ordendespacho = new OrdenDespacho();
    return $ordendespacho->getordendespacho();
}


    if (isset($_POST['DescargarOrdenDespacho'])) {
        $idOrden = $_POST['DescargarOrdenDespacho'];
        $ordenModel = new OrdenDespacho();
        $orden = $ordenModel->DescargarOrdenDespacho($idOrden);
    
        if ($orden) {
            ob_start(); // Iniciar buffer de salida
   
        } else {
            echo "<script>alert('No se encontrÃ³ la Orden de Despacho.');</script>";
        }
    }

$pagina = "ordendespacho";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
    $bitacoraModel->registrarBitacora(
        $_SESSION['id_usuario'],
        '14',
        'ACCESAR',
        'El usuario accediÃ³ al al modulo de Ordenes de Despacho',
        'media'
    );}
    $ordendespacho = getordendespacho();
    
    // Obtener facturas disponibles
    $ordenModel = new OrdenDespacho();
    $facturas = $ordenModel->obtenerFacturasDisponibles();

    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
ob_end_flush();?>
========== FIN ARCHIVO: OrdenDespacho.php ==========



========== ARCHIVO: pasarela.php ==========

<?php
ob_start();
require_once 'modelo/pasareladepago.php';
require_once 'modelo/cuenta.php';
require_once 'modelo/factura.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/DolarService.php';
require_once 'modelo/notificacion.php';
require_once 'modelo/ordenDespacho.php';
define('MODULO_PASARELA_PAGOS', 16); // Define el ID
$bitacoraModel = new Bitacora();
$id_rol = $_SESSION['id_rol'];


$permisosObj = new Permisos();
$permisosUsuario = $permisosObj->getPermisosPorRolModulo();

$pasarela = new PasareladePago();
$cuentaModel = new Cuentabanco();
$listadocuentas = $cuentaModel->consultarCuentabanco();

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $accion = isset($_POST['accion']) ? $_POST['accion'] : '';

    switch ($accion) {
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, 'Pasarela de pagos');
            echo json_encode($permisosActualizados);
            exit;
            
        case 'ingresar':
            // Verificar que se hayan enviado pagos
            if (!isset($_POST['pagos']) || empty($_POST['pagos'])) {
                echo json_encode(['status' => 'error', 'message' => 'No se han enviado datos de pagos']);
                exit;
            }
            
            $id_factura = $_POST['id_factura'];
            $pagos = $_POST['pagos'];
            $resultados = [];
            $errores = [];
            
            // Procesar cada pago individualmente
            foreach ($pagos as $index => $pagoData) {
                try {
                    $pasarela = new PasareladePago();
                    
                    // Asignar datos del pago
                    $pasarela->setCuenta($pagoData['cuenta']);
                    $pasarela->setReferencia($pagoData['referencia']);
                    $pasarela->setFecha(date('Y-m-d')); // Fecha actual
                    $pasarela->setTipo($pagoData['tipo']);
                    $pasarela->setFactura($id_factura);
                    $pasarela->setMonto($pagoData['monto']);
                    $pasarela->setObservaciones('');
                    
                    // Validar referencia Ãºnica
                    if (!$pasarela->validarCodigoReferencia()) {
                        $errores[] = "La referencia {$pagoData['referencia']} ya existe";
                        continue;
                    }
                    
                    // Procesar comprobante de imagen si existe
                    $comprobanteNombre = null;
                    if (isset($_FILES['pagos']['name'][$index]['comprobante']) && 
                        $_FILES['pagos']['name'][$index]['comprobante']) {
                        
                        $comprobante = $_FILES['pagos']['tmp_name'][$index]['comprobante'];
                        $comprobanteNombre = 'comprobante_' . time() . '_' . $index . '.jpg';
                        $destino = 'comprobantes/' . $comprobanteNombre;
                        
                        // Crear directorio si no existe
                        if (!is_dir('comprobantes')) {
                            mkdir('comprobantes', 0755, true);
                        }
                        
                        // Mover archivo
                        if (!move_uploaded_file($comprobante, $destino)) {
                            $errores[] = "Error al subir el comprobante para la referencia {$pagoData['referencia']}";
                            continue;
                        }
                        
                        $pasarela->setComprobante($comprobanteNombre);
                    }
                    
                    // Intentar ingresar el pago
                    if ($pasarela->pasarelaTransaccion('Ingresar')) {
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_PASARELA_PAGOS,
                            'INGRESAR',
                            'El usuario registrÃ³ la referencia bancaria: ' . $pagoData['referencia'],
                            'media');
                         $resultados[] = [
                            'status' => 'success', 
                            'referencia' => $pagoData['referencia'],
                            'comprobante' => $comprobanteNombre
                        ];
                    } else {
                        $errores[] = "Error al ingresar el pago con referencia {$pagoData['referencia']}";
                    }
                    
                } catch (Exception $e) {
                    $errores[] = "Error procesando pago {$index}: " . $e->getMessage();
                }
            }
            
            // Preparar respuesta
            if (empty($errores)) {
                echo json_encode([
                    'status' => 'success', 
                    'message' => 'Todos los pagos se registraron correctamente',
                    'pagos' => $resultados
                ]);
            } else {
                echo json_encode([
                    'status' => 'partial', 
                    'message' => 'Algunos pagos no se pudieron procesar',
                    'pagos_exitosos' => $resultados,
                    'errores' => $errores
                ]);
            }
            exit;
            
        case 'modificar':
            $id = $_POST['id_detalles'];
            $pasarela->setIdDetalles($id);
            $pasarela->setReferencia($_POST['referencia']);
            $pasarela->setFecha($_POST['fecha']);
            $pasarela->setTipo($_POST['tipo']);
            $pasarela->setFactura($_POST['id_factura']);
            $pasarela->setCuenta($_POST['cuenta']);
            $pasarela->setMonto($_POST['monto']);

            if ($pasarela->pasarelaTransaccion('Modificar')) {
                $pagoActualizado = $pasarela->obtenerPagoPorId($id);
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_PASARELA_PAGOS,
                    'MODIFICAR',
                    'El usuario modificÃ³ la referencia bancaria: ' . $pagoActualizado['referencia'],
                    'media'
                );
                echo json_encode(['status' => 'success', 'pago' => $pagoActualizado]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar el producto']);
            }
            break;
            
        case 'modificar_estado':
            $id = $_POST['id_detalles'];
            $nuevoEstatus = $_POST['estatus'];
            $factura = $_POST['id_factura'];
            $pasarela->setIdDetalles($id);
            $pasarela->setEstatus($nuevoEstatus);
            $pasarela->setFactura($factura);

            if ($pasarela->pasarelaTransaccion('Procesar')) {
                $ordenDespacho = new OrdenDespacho();
                $ordenDespacho->crearPorFactura($factura);
                $pagoActualizado = $pasarela->obtenerPagoPorId($id);
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_PASARELA_PAGOS,
                    'MODIFICAR',
                    'El usuario cambiÃ³ el estatus del pago de la referencia bancaria: ' . $pagoActualizado['referencia'] . ' a ' . $nuevoEstatus,
                    'media'
                );
                echo json_encode(['status' => 'success', 'pago' => $pagoActualizado]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estatus']);
            }
            
            // Crear notificaciÃ³n
            $bd_seguridad = new BD('S');
            $pdo_seguridad = $bd_seguridad->getConexion();
            $notificacionesModel = new NotificacionModel($pdo_seguridad);
            $notificacionesModel->crear(
                $_SESSION['id_usuario'],
                'pago',
                'Estatus de pago actualizado',
                "El estatus del pago con referencia " . $pagoActualizado['referencia'] . " ha sido cambiado a " . $nuevoEstatus . " por el usuario " . $_SESSION['name'],
                null,
                'media',
                MODULO_PASARELA_PAGOS,
                'modificar_estado'
            );
            break;
            
        case 'eliminar':
            $pasarela = new PasareladePago();
            $id = $_POST['id_detalles'];
            $pasarela->setIdDetalles($id);
            if ($pasarela->pasarelaTransaccion('Eliminar')) {
                $pagoEliminado = $pasarela->obtenerPagoPorId($id);
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_PASARELA_PAGOS,
                    'ELIMINAR',
                    'El usuario eliminÃ³ la referencia bancaria: ' . ($pagoEliminado ? $pagoEliminado['referencia'] : 'ID ' . $id),
                    'media'
                );
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el producto']);
            }
            break;
            
        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            break;
    }
    exit;
}

// Consulta de datos segÃºn el rol
if ($_SESSION['nombre_rol'] != 'Cliente') {
    $datos = $pasarela->pasarelaTransaccion('ConsultarTodos');
} else {
    $pasarela->setCedula($_SESSION['cedula']);
    $datos = $pasarela->pasarelaTransaccion('Consultar');
}

$pagina = "pasarela";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
            if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '12',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Pasarela de pagos',
    'media'
);}
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: pasarela.php ==========



========== ARCHIVO: PasareladePago.php ==========

<?php 
ob_start();
require_once 'modelo/pasareladepago.php';
require_once 'modelo/cuenta.php';
require_once 'modelo/factura.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/DolarService.php';
require_once 'modelo/notificacion.php';
define('MODULO_PASARELA_PAGOS', 16); // Define el ID del mÃ³dulo
$bitacoraModel = new Bitacora();

// Registrar acceso al mÃ³dulo si hay sesiÃ³n activa
if (isset($_SESSION['id_usuario'])) {
    $bitacoraModel->registrarBitacora(
        $_SESSION['id_usuario'],
        MODULO_PASARELA_PAGOS,
        'ACCESAR',
        'Acceso al mÃ³dulo de pasarela de pagos',
        'baja'
    );
} else {
    // Redirigir a login si no hay sesiÃ³n
    header('Location: ?pagina=login');
    exit;
}
$data = [];
$dolarService = new DolarService();
$precioDolar = $dolarService->obtenerPrecioDolar();
$dolarService->guardarPrecioCache($precioDolar);

// Manejar generaciÃ³n de reportes PDF
try {
    $dolarService = new DolarService();
    $precioDolar = $dolarService->obtenerPrecioDolar();
    $dolarService->guardarPrecioCache($precioDolar);
    
    // Asignar a $data
    $data['monitors'] = [
        'bcv' => [
            'price' => $precioDolar,
            'updated' => date('Y-m-d H:i:s')
        ]
    ];
} catch (Exception $e) {
    // En caso de error, usar valores por defecto
    $data['monitors'] = [
        'bcv' => [
            'price' => 35.50,
            'updated' => date('Y-m-d H:i:s') . ' (valor por defecto)'
        ]
    ];
    error_log('Error obteniendo precio dÃ³lar: ' . $e->getMessage());
}
// --- BLOQUE AJAX ---
// Procesar solo si la peticiÃ³n es AJAX y trae la clave "accion"
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['accion'])) {
    header('Content-Type: application/json; charset=utf-8');
    $accion = $_POST['accion'];

    switch ($accion) {
        case 'ingresar':
            if (empty($_POST['pagos'])) {
                echo json_encode(['status' => 'error', 'message' => 'No se han enviado datos de pagos']);
                exit;
            }

            $id_factura = $_POST['id_factura'];
            $pagos = $_POST['pagos'];
            $resultados = [];
            $errores = [];

            foreach ($pagos as $index => $pagoData) {
                try {
                    $pasarela = new PasareladePago();
                    $pasarela->setCuenta($pagoData['cuenta']);
                    $pasarela->setReferencia($pagoData['referencia']);
                    $pasarela->setFecha(date('Y-m-d'));
                    $pasarela->setTipo($pagoData['tipo']);
                    $pasarela->setFactura($id_factura);
                    $pasarela->setMonto($pagoData['monto']);
                    $pasarela->setObservaciones('');

                    // Validar referencia duplicada
                    if (!$pasarela->validarCodigoReferencia()) {
                        $errores[] = "La referencia {$pagoData['referencia']} ya existe";
                        continue;
                    }

                    // Manejo de comprobante
                    $comprobanteNombre = null;
if (!empty($_FILES['pagos']['name'][$index]['comprobante'])) {
    $comprobanteTmp = $_FILES['pagos']['tmp_name'][$index]['comprobante'];
    $comprobanteOriginal = $_FILES['pagos']['name'][$index]['comprobante'];

    // Detectar extensiÃ³n original de forma segura
    $extension = strtolower(pathinfo($comprobanteOriginal, PATHINFO_EXTENSION));

    // Validar que sea una extensiÃ³n permitida (seguridad)
    $extensionesPermitidas = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'pdf'];
    if (!in_array($extension, $extensionesPermitidas)) {
        $errores[] = "Formato de archivo no permitido para la referencia {$pagoData['referencia']}";
        continue;
    }

    // Generar nombre Ãºnico con la extensiÃ³n original
    $comprobanteNombre = 'comprobante_' . time() . '_' . $index . '.' . $extension;
    $destino = 'comprobantes/' . $comprobanteNombre;

    // Crear carpeta si no existe
    if (!is_dir('comprobantes')) {
        mkdir('comprobantes', 0755, true);
    }

    // Mover archivo
    if (!move_uploaded_file($comprobanteTmp, $destino)) {
        $errores[] = "Error al subir el comprobante para la referencia {$pagoData['referencia']}";
        continue;
    }

    $pasarela->setComprobante($comprobanteNombre);
}


                    // Guardar pago
                    if ($pasarela->pasarelaTransaccion('Ingresar')) {
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_PASARELA_PAGOS,
                            'INGRESAR',
                            'Ingreso de pago con referencia ' . $pagoData['referencia'],
                            'alta'
                        );
                        // Crear notificaciÃ³n
                        $bd_seguridad = new BD('S');
                        $pdo_seguridad = $bd_seguridad->getConexion();
                        $notificacionModel = new NotificacionModel($pdo_seguridad);
                        $notificacionModel->crear(
                            $_SESSION['id_usuario'],
                            'pago',
                            'Nuevo pago registrado',
                            "Se ha registrado un nuevo pago con referencia " . $pagoData['referencia'] . " por el usuario " . $_SESSION['name'],
                            null,
                            'alta',
                            MODULO_PASARELA_PAGOS,
                            'ingresar'
                        );
                        $resultados[] = [
                            'status' => 'success',
                            'referencia' => $pagoData['referencia'],
                            'comprobante' => $comprobanteNombre
                        ];
                    } else {
                        $errores[] = "Error al ingresar el pago con referencia {$pagoData['referencia']}";
                    }
                } catch (Exception $e) {
                    $errores[] = "Error procesando pago {$index}: " . $e->getMessage();
                }
            }

            // Respuesta JSON segÃºn resultados
            if (empty($errores)) {
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Los Datos de los pagos se registraron correctamente ahora debe esperar que su pago sea verificado por un administrador',
                    'pagos' => $resultados
                ]);
            } elseif (!empty($resultados)) {
                echo json_encode([
                    'status' => 'partial',
                    'message' => 'Algunos pagos no se pudieron procesar',
                    'pagos_exitosos' => $resultados,
                    'errores' => $errores
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'NingÃºn pago pudo ser procesado',
                    'errores' => $errores
                ]);
            }
            exit; // DETENER EJECUCIÃ“N DESPUÃ‰S DE RESPONDER JSON
            

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            exit;
    }
}

// --- BLOQUE VISTA ---
// Si no es AJAX, carga la vista normalmente
if (isset($_POST['id_factura'])) {
    $idFactura = $_POST['id_factura'];
    $facturaModel = new Factura();
    $cuentaModel = new Cuentabanco();
    $listadocuentas = $cuentaModel->consultarCuentabanco();
    $monto = $facturaModel->obtenerMontoTotalFactura($idFactura);

    $pagina = "pasareladepago";
    if (is_file("vista/" . $pagina . ".php")) {
        require_once("vista/" . $pagina . ".php");
    } else {
        echo "PÃ¡gina en construcciÃ³n";
    }
} else {
    header("Location: ?pagina=gestionarfactura");
    exit;
}

ob_end_flush();
?>

========== FIN ARCHIVO: PasareladePago.php ==========



========== ARCHIVO: PasswordRecoveryController.php ==========

<?php
require_once 'modelo/PasswordRecoveryModel.php';

class PasswordRecoveryController {
    
    private $model;
    
    public function __construct() {
        if (session_status() == PHP_SESSION_NONE) {
            session_start();
        }
        $this->model = new PasswordRecoveryModel();
    }
    
    public function mostrarFormularioRecuperacion() {
        include 'vista/password_recovery/form.php';
    }

    public function procesarSolicitud() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !isset($_POST['email'])) {
            header('Location: /proyecto-casalai-ca/index.php?pagina=password-recovery');
            exit;
        }

        $correo = filter_var(trim($_POST['email']), FILTER_VALIDATE_EMAIL);
        if (!$correo) {
            $_SESSION['mensaje'] = ['tipo' => 'error', 'texto' => 'Correo electrÃ³nico no vÃ¡lido.'];
            header('Location: /proyecto-casalai-ca/index.php?pagina=password-recovery');
            exit;
        }

        $usuario = $this->model->verificarCorreo($correo);
        if ($usuario) {
            $token = bin2hex(random_bytes(32));
            $expira = date('Y-m-d H:i:s', strtotime('+1 hour'));
            $this->model->guardarToken($usuario['id_usuario'], $token, $expira);

            // Enviar el correo de recuperaciÃ³n
            if ($this->model->enviarCorreoRecuperacion($correo, $token) === true) {
                $_SESSION['mensaje'] = [
                    'tipo' => 'success',
                    'texto' => 'Si tu correo electrÃ³nico estÃ¡ en nuestros registros, recibirÃ¡s un enlace para restablecer tu contraseÃ±a.'
                ];
            } else {
                // Error al enviar el correo
                $_SESSION['mensaje'] = [
                    'tipo' => 'error',
                    'texto' => 'No se pudo enviar el correo de recuperaciÃ³n. Por favor, intÃ©ntalo de nuevo mÃ¡s tarde.'
                ];
            }
        } else {
            // Mensaje genÃ©rico para no revelar si el correo existe
            $_SESSION['mensaje'] = ['tipo' => 'success', 'texto' => 'Si tu correo electrÃ³nico estÃ¡ en nuestros registros, recibirÃ¡s un enlace para restablecer tu contraseÃ±a.'];
        }

        header('Location: /password-recovery');
        exit;
    }

    public function mostrarFormularioReseteo() {
        $token = $_GET['token'] ?? null;
        if (!$token) {
            die('Token no proporcionado.');
        }

        $usuario = $this->model->buscarUsuarioPorToken($token);
        if (!$usuario) {
            die('Token invÃ¡lido o expirado.');
        }

        include 'vista/password_recovery/reset_form.php';
    }

    public function procesarReseteo() {
        if ($_SERVER['REQUEST_METHOD'] !== 'POST' || !isset($_POST['token'], $_POST['password'], $_POST['confirmar'])) {
            die('Solicitud no vÃ¡lida.');
        }

        $token = $_POST['token'];
        $clave = $_POST['password'];
        $confirmar_clave = $_POST['confirmar'];

        if ($clave !== $confirmar_clave) {
            $_SESSION['mensaje'] = ['tipo' => 'error', 'texto' => 'Las contraseÃ±as no coinciden.'];
            header('Location: /proyecto-casalai-ca/index.php?pagina=password-recovery&action=show_reset_form&token=' . urlencode($token));
header('Location: /proyecto-casalai-ca/index.php?pagina=login');
            exit;
        }

        $usuario = $this->model->buscarUsuarioPorToken($token);
        if (!$usuario) {
            die('Token invÃ¡lido o expirado.');
        }

        if ($this->model->actualizarClave($usuario['id_usuario'], $clave)) {
            $_SESSION['mensaje'] = ['tipo' => 'success', 'texto' => 'Tu contraseÃ±a ha sido actualizada exitosamente. Ya puedes iniciar sesiÃ³n.'];
            header('Location: /login');
        } else {
            $_SESSION['mensaje'] = ['tipo' => 'error', 'texto' => 'No se pudo actualizar la contraseÃ±a. IntÃ©ntalo de nuevo.'];
            header('Location: /password-recovery?action=show_reset_form&token=' . $token);
        }
        exit;
    }
}
?>
========== FIN ARCHIVO: PasswordRecoveryController.php ==========



========== ARCHIVO: pdfclientes.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfclientes.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_rif($_POST['rif']);
		  $o->set_nombre($_POST['nombre']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfclientes.php ==========



========== ARCHIVO: pdfdespachos.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfdespachos.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_fecha_despacho($_POST['fecha_despacho']);
		  $o->set_correlativo($_POST['correlativo']);
		  $o->set_cantidad($_POST['cantidad']);
		  $o->set_id_clientes($_POST['id_clientes']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfdespachos.php ==========



========== ARCHIVO: pdfmarcas.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfmarcas.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_descripcion_ma($_POST['descripcion_ma']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfmarcas.php ==========



========== ARCHIVO: pdfmodelos.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfmodelos.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_descripcion_mo($_POST['descripcion_mo']);
		  
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfmodelos.php ==========



========== ARCHIVO: pdfproductos.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfproductos.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_codigo($_POST['codigo']);
		  $o->set_nombre($_POST['nombre']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfproductos.php ==========



========== ARCHIVO: pdfproveedores.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfproveedores.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_rif($_POST['rif']);
		  $o->set_nombre($_POST['nombre']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfproveedores.php ==========



========== ARCHIVO: pdfrecepcion.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfrecepcion.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_fecha_recepcion($_POST['fecha_recepcion']);
		  $o->set_correlativo($_POST['correlativo']);
		  $o->set_id_proveedor($_POST['id_proveedor']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfrecepcion.php ==========



========== ARCHIVO: pdfusuarios.php ==========

<?php
  



//lo primero que se debe hacer es verificar al igual que en la vista es que exista el archivo
if (!is_file("modelo/".$pagina.".php")){
	//alli pregunte que si no es archivo se niega con !
	//si no existe envio mensaje y me salgo
	echo "Falta definir la clase ".$pagina;
	exit;
}
else{
//llamda al archivo que contiene la clase
//rusuarios, en ella estara el codigo que me premitira
//generar el reporte haciando uso de la libreria DOMPDF
require_once('modelo/pdfusuarios.php');
}
  
  if(is_file("vista/".$pagina.".php")){
	  
	  //bien si estamos aca es porque existe la vista y la clase
	  //por lo que lo primero que debemos hace es realizar una instancia de la clase
	  //instanciar es crear una variable local, que contiene los metodos de la clase
	  //para poderlos usar
	  
	  $o = new rusuarios(); //ahora nuestro objeto se llama $o y es una copia en memoria de la
	  //clase rusuarios
	  
	  if(isset($_POST['generar'])){
		  $o = new rusuarios();
		  $o->set_nombre($_POST['nombre']);
		  $o->generarPDF();
	  }
	  
	  require_once("vista/".$pagina.".php"); 
  }
  else{
	  echo "pagina en construccion";
  }
?>
========== FIN ARCHIVO: pdfusuarios.php ==========



========== ARCHIVO: perfil.php ==========

<?php 
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

// Para producciÃ³n, puedes desactivar los errores:
// error_reporting(0);
// ini_set('display_errors', 0);

require_once 'Modelo/usuario.php';
require_once 'Modelo/bitacora.php';
define('MODULO_PERFIL', 22);

if (!isset($_SESSION['id_usuario'])) {
    header('Location: ?pagina=login');
    exit;
}

$usuarioModel = new Usuarios();
$bitacoraModel = new Bitacora();
$usuario = $usuarioModel->obtenerUsuarioPorId($_SESSION['id_usuario']);

// Manejo de actualizaciones especÃ­ficas
if ($_SERVER['REQUEST_METHOD'] === 'POST') {
    $tipo = $_POST['tipo'] ?? 'general';
    
    switch($tipo) {
        case 'personal':
            $respuesta = handlePersonalUpdate($usuarioModel, $bitacoraModel, $usuario);
            break;
        case 'email':
            $respuesta = handleEmailUpdate($usuarioModel, $bitacoraModel, $usuario);
            break;
        case 'password':
            $respuesta = handlePasswordUpdate($usuarioModel, $bitacoraModel, $usuario);
            break;
        case 'avatar':
            $respuesta = handleAvatarUpdate($usuarioModel, $bitacoraModel, $usuario);
            break;
        default:
            $respuesta = ['status' => 'error', 'message' => 'Tipo de acciÃ³n no vÃ¡lido'];
    }
    
    header('Content-Type: application/json');
    echo json_encode($respuesta);
    exit;
}

// FunciÃ³n para actualizaciÃ³n de informaciÃ³n personal
function handlePersonalUpdate($usuarioModel, $bitacoraModel, $usuario) {
    // Validar contraseÃ±a actual
    if (empty($_POST['clave_actual'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es requerida'];
    }
    
    if (!password_verify($_POST['clave_actual'], $usuario['password'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es incorrecta'];
    }

    $datosActualizar = [];
    $camposEditables = ['username', 'nombres', 'apellidos', 'telefono'];

    foreach ($camposEditables as $campo) {
        if (isset($_POST[$campo]) && $_POST[$campo] != $usuario[$campo]) {
            $datosActualizar[$campo] = trim($_POST[$campo]);
        }
    }

    // Validar username Ãºnico
    if (isset($datosActualizar['username']) && $usuarioModel->existeUsuario($datosActualizar['username'], $usuario['id_usuario'])) {
        return ['status' => 'error', 'message' => 'El nombre de usuario ya estÃ¡ en uso'];
    }

    if (empty($datosActualizar)) {
        return ['status' => 'info', 'message' => 'No se realizaron cambios en la informaciÃ³n personal'];
    }

    if ($usuarioModel->actualizarPerfil($_SESSION['id_usuario'], $datosActualizar)) {
        // Actualizar sesiÃ³n
        foreach ($datosActualizar as $campo => $valor) {
            $_SESSION[$campo] = $valor;
        }
        $bitacoraModel->registrarBitacora($_SESSION['id_usuario'], MODULO_PERFIL, 'ActualizÃ³ su informaciÃ³n personal', 'UPDATE', 'tbl_usuarios');
        return ['status' => 'success', 'message' => 'InformaciÃ³n personal actualizada correctamente'];
    }

    return ['status' => 'error', 'message' => 'Error al actualizar la informaciÃ³n personal'];
}

// FunciÃ³n para cambio de foto de perfil
function handleAvatarUpdate($usuarioModel, $bitacoraModel, $usuario) {
    // Validar contraseÃ±a actual
    if (empty($_POST['clave_actual'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es requerida'];
    }
    
    if (!password_verify($_POST['clave_actual'], $usuario['password'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es incorrecta'];
    }

    // Manejo de la imagen de perfil
    if (isset($_FILES['foto_perfil']) && $_FILES['foto_perfil']['error'] === UPLOAD_ERR_OK) {
        // Validar tipo de archivo
        $tiposPermitidos = ['image/jpeg', 'image/png', 'image/gif'];
        $tipoArchivo = $_FILES['foto_perfil']['type'];
        
        if (!in_array($tipoArchivo, $tiposPermitidos)) {
            return ['status' => 'error', 'message' => 'Solo se permiten archivos JPG, PNG o GIF'];
        }
        
        // Validar tamaÃ±o (2MB mÃ¡ximo)
        if ($_FILES['foto_perfil']['size'] > 2 * 1024 * 1024) {
            return ['status' => 'error', 'message' => 'La imagen debe ser menor a 2MB'];
        }
        
        $nombreArchivo = uniqid('avatar_') . '_' . basename($_FILES['foto_perfil']['name']);
        $rutaDestino = __DIR__ . '/../uploads/' . $nombreArchivo;
        
        if (move_uploaded_file($_FILES['foto_perfil']['tmp_name'], $rutaDestino)) {
            // Eliminar foto anterior si existe
            if (!empty($usuario['foto_perfil']) && file_exists(__DIR__ . '/../uploads/' . $usuario['foto_perfil'])) {
                unlink(__DIR__ . '/../uploads/' . $usuario['foto_perfil']);
            }
            
            if ($usuarioModel->actualizarPerfil($_SESSION['id_usuario'], ['foto_perfil' => $nombreArchivo])) {
                $_SESSION['foto_perfil'] = $nombreArchivo;
                $bitacoraModel->registrarBitacora($_SESSION['id_usuario'], MODULO_PERFIL, 'CambiÃ³ su foto de perfil', 'UPDATE', 'tbl_usuarios');
                return ['status' => 'success', 'message' => 'Foto de perfil actualizada correctamente'];
            }
        }
        
        return ['status' => 'error', 'message' => 'Error al guardar la imagen de perfil'];
    }

    return ['status' => 'error', 'message' => 'No se seleccionÃ³ ninguna imagen'];
}

// FunciÃ³n para cambio de correo
function handleEmailUpdate($usuarioModel, $bitacoraModel, $usuario) {
    $nuevo_correo = trim($_POST['new_email'] ?? '');
    $password = $_POST['password'] ?? '';

    // Validaciones
    if (empty($nuevo_correo) || empty($password)) {
        return ['status' => 'error', 'message' => 'Todos los campos son obligatorios'];
    }

    if (!filter_var($nuevo_correo, FILTER_VALIDATE_EMAIL)) {
        return ['status' => 'error', 'message' => 'El formato del correo no es vÃ¡lido'];
    }

    // Verificar contraseÃ±a actual
    if (!password_verify($password, $usuario['password'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es incorrecta'];
    }

    // Verificar si el correo ya existe
    if ($usuarioModel->existeCorreo($nuevo_correo, $usuario['id_usuario'])) {
        return ['status' => 'error', 'message' => 'El correo electrÃ³nico ya estÃ¡ en uso'];
    }

    // Actualizar correo
    if ($usuarioModel->actualizarPerfil($_SESSION['id_usuario'], ['correo' => $nuevo_correo])) {
        // Actualizar sesiÃ³n
        $_SESSION['correo'] = $nuevo_correo;
        $bitacoraModel->registrarBitacora($_SESSION['id_usuario'], MODULO_PERFIL, 'CambiÃ³ su correo electrÃ³nico', 'UPDATE', 'tbl_usuarios');
        return ['status' => 'success', 'message' => 'Correo electrÃ³nico actualizado correctamente'];
    }

    return ['status' => 'error', 'message' => 'Error al actualizar el correo electrÃ³nico'];
}

// FunciÃ³n para cambio de contraseÃ±a
function handlePasswordUpdate($usuarioModel, $bitacoraModel, $usuario) {
    $current_password = $_POST['current_password'] ?? '';
    $new_password = $_POST['new_password'] ?? '';
    $confirm_password = $_POST['confirm_password'] ?? '';

    // Validaciones
    if (empty($current_password) || empty($new_password) || empty($confirm_password)) {
        return ['status' => 'error', 'message' => 'Todos los campos son obligatorios'];
    }

    // Verificar contraseÃ±a actual
    if (!password_verify($current_password, $usuario['password'])) {
        return ['status' => 'error', 'message' => 'La contraseÃ±a actual es incorrecta'];
    }

    // Validar que las contraseÃ±as coincidan
    if ($new_password !== $confirm_password) {
        return ['status' => 'error', 'message' => 'Las contraseÃ±as nuevas no coinciden'];
    }

    // Validar fortaleza de la nueva contraseÃ±a
    if (strlen($new_password) < 6) {
        return ['status' => 'error', 'message' => 'La nueva contraseÃ±a debe tener al menos 6 caracteres'];
    }

    // Verificar que no sea igual a la actual
    if (password_verify($new_password, $usuario['password'])) {
        return ['status' => 'error', 'message' => 'La nueva contraseÃ±a no puede ser igual a la actual'];
    }

    // Actualizar contraseÃ±a (el modelo realizarÃ¡ el hash)
    if ($usuarioModel->actualizarPerfil($_SESSION['id_usuario'], ['password' => $new_password])) {
        $bitacoraModel->registrarBitacora($_SESSION['id_usuario'], MODULO_PERFIL, 'CambiÃ³ su contraseÃ±a', 'UPDATE', 'tbl_usuarios');
        return ['status' => 'success', 'message' => 'ContraseÃ±a actualizada correctamente'];
    }

    return ['status' => 'error', 'message' => 'Error al actualizar la contraseÃ±a'];
}

// Cargar vista
$pagina = "perfil";
if (is_file("Vista/" . $pagina . ".php")) {
    require_once("Vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
========== FIN ARCHIVO: perfil.php ==========



========== ARCHIVO: permiso.php ==========

<?php
require_once __DIR__ . '/../modelo/permiso.php';
require_once __DIR__ . '/../modelo/usuario.php';
require_once __DIR__ . '/../modelo/bitacora.php';
require_once __DIR__ . '/../modelo/notificacion.php';
$bd_seguridad = new BD('S');
            $pdo_seguridad = $bd_seguridad->getConexion();
            $notificacionesModel = new NotificacionModel($pdo_seguridad);
$permisos = new Permisos();
$bitacoraModel = new Bitacora();
// Obtener roles
$roles = $permisos->getRoles();

// Obtener mÃ³dulos
$modulos_permiso = $permisos->getModulos();

// Acciones posibles
$acciones = ['ingresar','consultar', 'incluir', 'modificar', 'eliminar', 'generar reporte'];

// Obtener permisos actuales (por rol y mÃ³dulo)
$permisosActuales = $permisos->getPermisosPorRolModulo();
$permisosUsuario = $permisos->getPermisosPorRolModulo();
if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['guardarPermisos'])) {
    $bitacoraModel = new Bitacora();
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            '17',
            'MODIFICAR',
            'El usuario modificÃ³ los permisos de los roles del sistema',
            'media'
        );
    }
    $permisos->guardarPermisos($_POST['permisos'] ?? [], $roles, $modulos_permiso, $acciones);
    $notificacionesModel->crear(
        $_SESSION['id_usuario'],
        'seguridad',
        'Permisos actualizados',
        'Se han actualizado los permisos de los roles del sistema por el usuario ' . $_SESSION['name'],
        null,
        'media',
        '17',
        'modificar'
    );
    header("Location: ?pagina=permiso&ok=1");
    exit;
}

$pagina = "permiso";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
            if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '17',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Permisos',
    'media'
);}
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
========== FIN ARCHIVO: permiso.php ==========



========== ARCHIVO: ProcesarPedido.php ==========

<?php
require_once 'modelo/proveedor.php';
require_once 'modelo/producto.php';
require_once 'config/config.php';

// ConfiguraciÃ³n de PHPMailer
require_once 'config/PHPMailer/PHPMailer.php';
require_once 'config/PHPMailer/Exception.php';
require_once 'config/PHPMailer/SMTP.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

if ($_SERVER['REQUEST_METHOD'] == 'POST' && $_POST['accion'] == 'realizar_pedido') {
    try {
        // Obtener datos del formulario
        $id_producto = $_POST['id_producto'];
        $id_proveedor = $_POST['id_proveedor'];
        $cantidad = $_POST['cantidad'];
        
        // Obtener informaciÃ³n del producto
        $productoModel = new Producto();
        $producto = $productoModel->obtenerProductoPorId($id_producto);
        
        // Obtener informaciÃ³n del proveedor
        $proveedorModel = new Proveedores();
        $proveedor = $proveedorModel->obtenerProveedorPorId($id_proveedor);
        
        if (!$producto || !$proveedor) {
            throw new Exception("No se pudo obtener la informaciÃ³n del producto o proveedor");
        }
        
        // Configurar y enviar correo
        $mail = new PHPMailer(true);
        
        // ConfiguraciÃ³n del servidor SMTP (ajusta segÃºn tu configuraciÃ³n)
        $mail->isSMTP();
        $mail->Host = 'smtp.tudominio.com';
        $mail->SMTPAuth = true;
        $mail->Username = 'tu_correo@tudominio.com';
        $mail->Password = 'tu_contraseÃ±a';
        $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
        $mail->Port = 587;
        
        // Remitente y destinatario
        $mail->setFrom('Darckortgame@gmail.com', 'CASA LAI');
        $mail->addAddress($proveedor['correo'], $proveedor['nombre']);
        
        // Contenido del correo
        $mail->isHTML(true);
        $mail->Subject = 'Nuevo Pedido de Producto - ' . $producto['nombre_producto'];
        
        $mail->Body = "
            <h1>Solicitud de Pedido</h1>
            <p>Estimado proveedor <strong>{$proveedor['nombre']}</strong>,</p>
            <p>Le informamos que hemos realizado un pedido con los siguientes detalles:</p>
            
            <table border='1' cellpadding='5' cellspacing='0'>
                <tr>
                    <th>Producto</th>
                    <th>modelo</th>
                    <th>Cantidad Solicitada</th>
                </tr>
                <tr>
                    <td>{$producto['nombre_producto']}</td>
                    <td>{$producto['nombre_modelo']}</td>
                    <td>{$cantidad}</td>
                </tr>
            </table>
            
            <p>Por favor confirme la recepciÃ³n de este pedido y la fecha estimada de entrega.</p>
            <p>Atentamente,</p>
            <p>El equipo de Inventario</p>
        ";
        
        $mail->send();
        
        // Redirigir con mensaje de Ã©xito
        session_start();
        $_SESSION['mensaje'] = "Pedido realizado correctamente y notificaciÃ³n enviada al proveedor.";
        header('Location: ../vista/proveedor.php');
    } catch (Exception $e) {
        // En caso de error
        session_start();
        $_SESSION['error'] = "Error al procesar el pedido: " . $e->getMessage();
        header('Location: ../vista/proveedor.php');
    }
    exit();
}
?>
========== FIN ARCHIVO: ProcesarPedido.php ==========



========== ARCHIVO: producto.php ==========

<?php
ob_start();

require_once 'modelo/producto.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
define('MODULO_PRODUCTOS', 6);

$id_rol = $_SESSION['id_rol'] ?? 0;
$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('productos'));

// Manejo de solicitudes POST
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $accion = $_POST['accion'] ?? '';

    switch ($accion) {

        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('productos'));
            echo json_encode($permisosActualizados, JSON_UNESCAPED_UNICODE);
            exit;

        case 'ingresar':
            $Producto = new Productos();

            $Producto->setNombreP($_POST['nombre_producto'] ?? '');
            $Producto->setDescripcionP($_POST['descripcion_producto'] ?? '');
            $Producto->setIdModelo($_POST['modelo'] ?? null);
            $Producto->setStockActual($_POST['Stock_Actual'] ?? 0);
            $Producto->setStockMax($_POST['Stock_Maximo'] ?? 0);
            $Producto->setStockMin($_POST['Stock_Minimo'] ?? 0);
            $Producto->setClausulaDeGarantia($_POST['Clausula_garantia'] ?? '');
            $Producto->setCodigo($_POST['Seriales'] ?? '');
            $Producto->setCategoria($_POST['Categoria'] ?? '');
            $Producto->setPrecio($_POST['Precio'] ?? 0);

            if (!$Producto->validarNombreProducto()) {
                header('Content-Type: application/json; charset=utf-8');
                echo json_encode(['status' => 'error', 'message' => 'Este Producto ya existe'], JSON_UNESCAPED_UNICODE);
                exit;
            } elseif (!$Producto->validarCodigoProducto()) {
                header('Content-Type: application/json; charset=utf-8');
                echo json_encode(['status' => 'error', 'message' => 'Este CÃ³digo Interno ya existe'], JSON_UNESCAPED_UNICODE);
                exit;
            } else {
                try {
                    $resultado = $Producto->ingresarProducto($_POST);
                    if ($resultado) {
                        $id_producto = $resultado;
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_PRODUCTOS,
                            'REGISTRAR',
                            'El usuario registrÃ³ un nuevo producto: ' . ($_POST['nombre_producto'] ?? ''),
                            'media'
                        );

                        $respuesta = [
                            'status' => 'success',
                            'id_producto' => $id_producto
                        ];

                        // Procesar imagen si fue enviada
                        if (isset($_FILES['imagen']) && $_FILES['imagen']['error'] == 0) {
                            $directorio = "img/productos/";
                            if (!is_dir($directorio)) {
                                mkdir($directorio, 0755, true);
                            }
                            $nombre_original = $_FILES['imagen']['name'];
                            $extension = strtolower(pathinfo($nombre_original, PATHINFO_EXTENSION));
                            $nombre_nuevo = "producto_" . $id_producto . "." . $extension;
                            $ruta_destino = $directorio . $nombre_nuevo;

                            if (move_uploaded_file($_FILES['imagen']['tmp_name'], $ruta_destino)) {
                                // Intentar guardar nombre en BD si el mÃ©todo existe
                                if (method_exists($Producto, 'guardarImagenProducto')) {
                                    // Guardar la ruta relativa completa, no solo el nombre
                                    $Producto->guardarImagenProducto($id_producto, $ruta_destino);
                                }
                                $respuesta['imagen'] = $ruta_destino;
                                $respuesta['mensaje'] = "Producto registrado e imagen guardada correctamente.";
                            } else {
                                $respuesta['imagen'] = null;
                                $respuesta['mensaje'] = "Producto registrado, pero error al guardar la imagen.";
                            }
                        } else {
                            $respuesta['mensaje'] = "Producto registrado correctamente.";
                        }

                        header('Content-Type: application/json; charset=utf-8');
                        echo json_encode($respuesta, JSON_UNESCAPED_UNICODE);
                        exit;
                    } else {
                        header('Content-Type: application/json; charset=utf-8');
                        echo json_encode(['status' => 'error', 'message' => 'Error al registrar producto'], JSON_UNESCAPED_UNICODE);
                        exit;
                    }
                } catch (Exception $e) {
                    header('Content-Type: application/json; charset=utf-8');
                    echo json_encode(['status' => 'error', 'message' => $e->getMessage()], JSON_UNESCAPED_UNICODE);
                    exit;
                }
            }
            break;

        case 'obtener_producto':
            $id = $_POST['id_producto'] ?? null;
            header('Content-Type: application/json; charset=utf-8');
            if ($id !== null) {
                $Producto = new Productos();
                $producto = $Producto->obtenerProductoPorId($id);
                if ($producto !== null) {
                    echo json_encode($producto, JSON_UNESCAPED_UNICODE);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Producto no encontrado'], JSON_UNESCAPED_UNICODE);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de producto no proporcionado'], JSON_UNESCAPED_UNICODE);
            }
            exit;
            break;

        case 'modificar':
            $id = $_POST['id_producto'] ?? null;
            if ($id === null) {
                header('Content-Type: application/json; charset=utf-8');
                echo json_encode(['status' => 'error', 'message' => 'ID de producto no proporcionado'], JSON_UNESCAPED_UNICODE);
                exit;
            }

            $Producto = new Productos();
            $Producto->setId($id);
            $Producto->setNombreP($_POST['nombre_producto'] ?? '');
            $Producto->setDescripcionP($_POST['descripcion_producto'] ?? '');
            $Producto->setIdModelo($_POST['modelo'] ?? null);
            $Producto->setStockActual($_POST['Stock_Actual'] ?? 0);
            $Producto->setStockMax($_POST['Stock_Maximo'] ?? 0);
            $Producto->setStockMin($_POST['Stock_Minimo'] ?? 0);
            $Producto->setClausulaDeGarantia($_POST['Clausula_garantia'] ?? '');
            $Producto->setCodigo($_POST['Seriales'] ?? '');
            $Producto->setPrecio($_POST['Precio'] ?? 0);

            $productoViejo = $Producto->obtenerProductoPorId($id);

            try {
                if ($Producto->modificarProducto($id, $_POST)) {
                    // Procesar imagen si existe
                    if (isset($_FILES['imagen']) && $_FILES['imagen']['error'] == 0) {
                        $directorio = "img/productos/";
                        if (!is_dir($directorio)) {
                            mkdir($directorio, 0755, true);
                        }
                        // Eliminar imagen anterior
                        $extensiones = ['png', 'jpg', 'jpeg', 'webp', 'gif'];
                        foreach ($extensiones as $ext) {
                            $ruta_antigua = $directorio . 'producto_' . $id . '.' . $ext;
                            if (file_exists($ruta_antigua)) {
                                @unlink($ruta_antigua);
                            }
                        }
                        // Guardar la nueva imagen
                        $nombre_original = $_FILES['imagen']['name'];
                        $extension = strtolower(pathinfo($nombre_original, PATHINFO_EXTENSION));
                        $nombre_nuevo = "producto_" . $id . "." . $extension;
                        $ruta_destino = $directorio . $nombre_nuevo;
                        if (move_uploaded_file($_FILES['imagen']['tmp_name'], $ruta_destino)) {
                            if (method_exists($Producto, 'guardarImagenProducto')) {
                                // Guardar la ruta relativa completa, no solo el nombre
                                $Producto->guardarImagenProducto($id, $ruta_destino);
                            }
                            header('Content-Type: application/json; charset=utf-8');
                            echo json_encode(['status' => 'success', 'mensaje' => 'Producto modificado e imagen actualizada'], JSON_UNESCAPED_UNICODE);
                            exit;
                        } else {
                            header('Content-Type: application/json; charset=utf-8');
                            echo json_encode(['status' => 'error', 'message' => 'Error al guardar la imagen'], JSON_UNESCAPED_UNICODE);
                            exit;
                        }
                    } else {
                        // Sin imagen, solo Ã©xito en modificaciÃ³n
                        $productoActualizado = $Producto->obtenerProductoPorId($id);
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_PRODUCTOS,
                            'MODIFICAR',
                            'El usuario modificÃ³ el producto: ' . ($_POST['nombre_producto'] ?? '') . ' | Antes: ' . json_encode($productoViejo) . ' | DespuÃ©s: ' . json_encode($productoActualizado),
                            'media'
                        );
                        header('Content-Type: application/json; charset=utf-8');
                        echo json_encode(['status' => 'success', 'mensaje' => 'Producto modificado correctamente'], JSON_UNESCAPED_UNICODE);
                        exit;
                    }
                } else {
                    header('Content-Type: application/json; charset=utf-8');
                    echo json_encode(['status' => 'error', 'message' => 'Error al modificar el producto'], JSON_UNESCAPED_UNICODE);
                    exit;
                }
            } catch (Exception $e) {
                header('Content-Type: application/json; charset=utf-8');
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()], JSON_UNESCAPED_UNICODE);
                exit;
            }
            break;

        case 'eliminar':
            $id_producto = $_POST['id_producto'] ?? null;
            header('Content-Type: application/json; charset=utf-8');
            if ($id_producto === null) {
                echo json_encode(['status' => 'error', 'message' => 'ID del Producto no proporcionado'], JSON_UNESCAPED_UNICODE);
                exit;
            }
            $producto = new Productos();
            $response = $producto->eliminarProducto($id_producto);
            if (is_array($response) && ($response['success'] ?? false)) {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_PRODUCTOS,
                    'ELIMINAR',
                    'El usuario eliminÃ³ el producto ID: ' . $id_producto,
                    'media'
                );
                echo json_encode(['status' => 'success', 'message' => $response['message']], JSON_UNESCAPED_UNICODE);
            } else {
                $msg = is_array($response) ? ($response['message'] ?? 'Error al eliminar producto') : 'Error al eliminar producto';
                echo json_encode(['status' => 'error', 'message' => $msg], JSON_UNESCAPED_UNICODE);
            }
            exit;
            break;

        case 'cambiar_estatus':
            $id = $_POST['id_producto'] ?? null;
            $nuevoEstatus = $_POST['nuevo_estatus'] ?? null;
            header('Content-Type: application/json; charset=utf-8');
            if ($id === null || $nuevoEstatus === null) {
                echo json_encode(['status' => 'error', 'message' => 'ParÃ¡metros insuficientes'], JSON_UNESCAPED_UNICODE);
                exit;
            }
            if (!in_array($nuevoEstatus, ['habilitado', 'inhabilitado'])) {
                echo json_encode(['status' => 'error', 'message' => 'Estatus no vÃ¡lido'], JSON_UNESCAPED_UNICODE);
                exit;
            }
            $producto = new Productos();
            $producto->setId($id);
            if ($producto->cambiarEstatus($nuevoEstatus)) {
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    MODULO_PRODUCTOS,
                    'CAMBIAR ESTATUS',
                    'El usuario cambiÃ³ el estatus del producto ID ' . $id . ' a ' . $nuevoEstatus,
                    'media'
                );
                echo json_encode(['status' => 'success'], JSON_UNESCAPED_UNICODE);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estatus'], JSON_UNESCAPED_UNICODE);
            }
            exit;
            break;

        case 'reporte_parametrizado':
            if ($_SERVER['REQUEST_METHOD'] === 'POST' && isset($_POST['accion']) && $_POST['accion'] === 'reporte_parametrizado') {
                $tipoReporte = $_POST['tipoReporte'] ?? '';
                $categoria = $_POST['categoriaSeleccionada'] ?? '';
                $productoModel = new Productos();
                if ($tipoReporte === 'por_categoria') {
                    $datos = $productoModel->obtenerReporteCategorias();
                    $labels = array_column($datos, 'nombre_categoria');
                    $data = array_column($datos, 'cantidad');
                } elseif ($tipoReporte === 'por_categoria_especifica' && $categoria) {
                    $datos = $productoModel->obtenerProductosPorCategoria($categoria);
                    $labels = array_column($datos, 'nombre_producto');
                    $data = array_column($datos, 'stock');
                } elseif ($tipoReporte === 'precios') {
                    $datos = $productoModel->obtenerProductosConPrecios();
                    $labels = array_column($datos, 'nombre_producto');
                    $data = array_column($datos, 'precio');
                } else {
                    $labels = [];
                    $data = [];
                }
                header('Content-Type: application/json; charset=utf-8');
                echo json_encode(['labels' => $labels, 'data' => $data], JSON_UNESCAPED_UNICODE);
                exit;
            }
            break;

        default:
            header('Content-Type: application/json; charset=utf-8');
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida'], JSON_UNESCAPED_UNICODE);
            exit;
            break;
    }
}

// Funciones auxiliares y carga de vista

function obtenerModelos() {
    $ModelosModel = new Productos();
    return $ModelosModel->obtenerModelos();
}

function obtenerProductos() {
    $producto = new Producto();
    return $producto->obtenerProductos();
}

$productoModel = new Productos();
$masVendidos   = $productoModel->getProductosMasVendidos();
$stockProductos = $productoModel->getStockProductos();
$rotacion      = $productoModel->getRotacionProductos();
$categorias = $productoModel->CategoriasReporte();
$categoriasDinamicas = $productoModel->obtenerCategoriasDinamicas();
$reporteCategorias = $productoModel->obtenerReporteCategorias();

if (!$reporteCategorias || !is_array($reporteCategorias)) {
    $reporteCategorias = [];
}

$totalCategorias = array_sum(array_column($reporteCategorias, 'cantidad'));
foreach ($reporteCategorias as &$cat) {
    $cat['porcentaje'] = $totalCategorias > 0 ? round(($cat['cantidad'] / $totalCategorias) * 100, 2) : 0;
}
unset($cat);

$mostrarFormulario = !empty($categoriasDinamicas);
$pagina = "producto";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            '6',
            'ACCESAR',
            'El usuario accediÃ³ al modulo de Productos',
            'media'
        );
    }
    $modelos = obtenerModelos();
    $productos = obtenerProductos();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: producto.php ==========



========== ARCHIVO: proveedor.php ==========

<?php
ob_start();

require_once 'modelo/proveedor.php';
require_once 'modelo/producto.php';
require_once __DIR__ . '/../modelo/permiso.php';
require_once 'modelo/bitacora.php';

$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

// Definir constantes para IDs de mÃ³dulo y acciones
define('MODULO_PROVEEDORES', 8); // Cambiar segÃºn tu estructura de mÃ³dulos

$permisosUsuario = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('proveedores'));

$reporteProveedor = new Proveedores();
$reporteRankingProveedores = $reporteProveedor->getRankingProveedores();
$reporteComparacion = $reporteProveedor->getComparacionPreciosProducto();
$reporteDependencia = $reporteProveedor->getDependenciaProveedores();
if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $id_usuario_accion = $_SESSION['id_usuario'] ?? null; // Usuario que realiza la acciÃ³n
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('proveedores'));
            echo json_encode($permisosActualizados);
            exit;
            
        case 'registrar':
            $proveedor = new Proveedores();
            $proveedor->setNombre($_POST['nombre_proveedor']);
            $proveedor->setRif1($_POST['rif_proveedor']);
            $proveedor->setRepresentante($_POST['nombre_representante']);
            $proveedor->setRif2($_POST['rif_representante']);
            $proveedor->setCorreo($_POST['correo_proveedor']);
            $proveedor->setDireccion($_POST['direccion_proveedor']);
            $proveedor->setTelefono1($_POST['telefono_1']);
            $proveedor->setTelefono2($_POST['telefono_2']);
            $proveedor->setObservacion($_POST['observacion']);
            
            if ($proveedor->existeNombreProveedor($_POST['nombre_proveedor'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre del proveedor ya existe'
                ]);
                exit;
            }

            if ($proveedor->registrarProveedor()) {
                $proveedorRegistrado = $proveedor->obtenerUltimoProveedor();
                
                // Registrar en bitÃ¡cora (estilo RecepciÃ³n)
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacora = new Bitacora();
                    $bitacora->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_PROVEEDORES,
                        'REGISTRAR',
                        'El usuario registrÃ³ un nuevo proveedor: ' . $_POST['nombre_proveedor'],
                        'media'
                    );
                }
                
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Proveedor registrado correctamente',
                    'proveedor' => $proveedorRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar el proveedor'
                ]);
            }
            exit;

        case 'obtener_proveedor':
            $id_proveedor = $_POST['id_proveedor'];
            if ($id_proveedor !== null) {
                $proveedor = new Proveedores();
                $proveedorData = $proveedor->obtenerProveedorPorId($id_proveedor);
                
                if ($proveedorData !== null) {
                    echo json_encode($proveedorData);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Proveedor no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID del Proveedor no proporcionado']);
            }
            exit;

        case 'modificar':
            ob_clean();
            header('Content-Type: application/json; charset=utf-8');
            $id_proveedor = $_POST['id_proveedor'];
            $proveedor = new Proveedores();
            $proveedor->setIdProveedor($id_proveedor);
            $proveedor->setNombre($_POST['nombre_proveedor']);
            $proveedor->setRif1($_POST['rif_proveedor']);
            $proveedor->setRepresentante($_POST['nombre_representante']);
            $proveedor->setRif2($_POST['rif_representante']);
            $proveedor->setCorreo($_POST['correo_proveedor']);
            $proveedor->setDireccion($_POST['direccion_proveedor']);
            $proveedor->setTelefono1($_POST['telefono_1']);
            $proveedor->setTelefono2($_POST['telefono_2']);
            $proveedor->setObservacion($_POST['observacion']);
            
            if ($proveedor->existeNombreProveedor($_POST['nombre_proveedor'], $id_proveedor)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre del proveedor ya existe'
                ]);
                exit;
            }
            $proveedorViejo = $proveedor->obtenerProveedorPorId($id_proveedor);
                
            if ($proveedor->modificarProveedor($id_proveedor)) {
                $proveedorActualizado = $proveedor->obtenerProveedorPorId($id_proveedor);
                
                // Registrar en bitÃ¡cora (estilo RecepciÃ³n)
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacora = new Bitacora();
                    $bitacora->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_PROVEEDORES,
                        'MODIFICAR',
                        'El usuario modificÃ³ el proveedor: ' . $_POST['nombre_proveedor'].' que tenia los datos'.json_encode($proveedorViejo).' con los datos '. json_encode($proveedorActualizado),
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'proveedor' => $proveedorActualizado
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar el proveedor']);
            }
            exit;

        case 'eliminar':
            $id_proveedor = $_POST['id_proveedor'];
            if ($id_proveedor === null) {
                echo json_encode(['status' => 'error', 'message' => 'ID del Proveedor no proporcionado']);
                exit;
            }
            
            $proveedor = new Proveedores();
            // Obtener datos del proveedor antes de eliminarlo
            $proveedorAEliminar = $proveedor->obtenerProveedorPorId($id_proveedor);
            
            if ($proveedor->eliminarProveedor($id_proveedor)) {
                // Registrar en bitÃ¡cora (estilo RecepciÃ³n)
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacora = new Bitacora();
                    $bitacora->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_PROVEEDORES,
                        'ELIMINAR',
                        'El usuario eliminÃ³ el proveedor: ' . ($proveedorAEliminar ? $proveedorAEliminar['nombre'] : 'ID ' . $id_proveedor),
                        'media'
                    );
                }
                
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el Proveedor']);
            }
            exit;
        
        case 'cambiar_estado':
            $id_proveedor = $_POST['id_proveedor'];
            $nuevoEstatus = $_POST['nuevo_estatus'];

            if (!in_array($nuevoEstatus, ['habilitado', 'inhabilitado'])) {
                echo json_encode(['status' => 'error', 'message' => 'Estado no vÃ¡lido']);
                exit;
            }

            $proveedor = new Proveedores();
            $proveedor->setIdProveedor($id_proveedor);
            
            if ($proveedor->cambiarEstatus($nuevoEstatus)) {
                // Registrar en bitÃ¡cora (estilo RecepciÃ³n)
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacora = new Bitacora();
                    $bitacora->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_PROVEEDORES,
                        'CAMBIAR ESTATUS',
                        'El usuario cambiÃ³ el estatus del proveedor ID ' . $id_proveedor . ' a ' . $nuevoEstatus,
                        'media'
                    );
                }
                
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estatus del Proveedor']);
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
            break;
    }
}

function getproveedores() {
    $proveedor = new Proveedores();
    return $proveedor->getproveedores();
}

$proveedorModel = new Proveedores();
$reporteSuministroProveedores = $proveedorModel->obtenerReporteSuministroProveedores();
$totalSuministrado = array_sum(array_column($reporteSuministroProveedores, 'cantidad'));

function obtenerProductosConBajoStock() {
    $producto = new Producto();
    return $producto->obtenerProductosConBajoStock();
}

$pagina = "proveedor";
if (is_file("vista/" . $pagina . ".php")) {
    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
        $bitacora = new Bitacora();
        $bitacora->registrarBitacora(
            $_SESSION['id_usuario'],
            MODULO_PROVEEDORES,
            'ACCESAR',
            'El usuario accediÃ³ al modulo de Proveedores',
            'media'
        );
    }
    $proveedores = getproveedores();
    $productos = obtenerProductosConBajoStock();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: proveedor.php ==========



========== ARCHIVO: Recepcion.php ==========

<?php
// Requires organizados al inicio
require_once 'modelo/Recepcion.php';
require_once 'modelo/notificacion.php';
require_once __DIR__ . '/../modelo/permiso.php';
require_once 'modelo/bitacora.php';

define('MODULO_RECEPCION', 2); // Define el ID del mÃ³dulo de cuentas bancarias

$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

// Permisos: mantener variables compatibles con la vista y aÃ±adir consulta especÃ­fica del mÃ³dulo
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$permisosUsuario = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('recepcion'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    // Instanciar Recepcion solo si hay POST (cuando se va a usar)
    $k = new Recepcion();
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'listado':
            $respuesta = $k->listadoproductos();
            echo json_encode($respuesta);
        break;
        
        case 'productos_recepcion':
            $id_recepcion = $_POST['id_recepcion'];
            $recepcion = new Recepcion();
            $productos = $recepcion->obtenerProductosPorRecepcion($id_recepcion);
            echo json_encode($productos);
        break;

        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisos->getPermisosUsuarioModulo($id_rol, strtolower('recepcion'));
            echo json_encode($permisosActualizados);
        break;

        case 'registrar':
            header('Content-Type: application/json; charset=utf-8');

            // Setea los datos principales de la recepciÃ³n
            $k->setidproveedor($_POST['proveedor']);
            $k->setcorrelativo($_POST['correlativo']);
            $k->settamanocompra($_POST['tamanocompra']);
            $k->setestado('habilitado');

            // Verifica si el correlativo ya existe
            if ($k->existeCorrelativo($_POST['correlativo'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El NÂ° de Factura ya existe'
                ]);
                exit;
            }

            // Registra la recepciÃ³n y los productos asociados
            $resultado = $k->registrarRecepcion(
                $_POST['producto'],
                $_POST['cantidad'],
                $_POST['costo']
            );

            // Obtiene la Ãºltima recepciÃ³n registrada
            $recepcionRegistrada = $k->obtenerUltimaRecepcion();

            if ($resultado && $recepcionRegistrada) {
                // Registra la acciÃ³n en la bitÃ¡cora
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_RECEPCION,
                        'REGISTRAR',
                        'El usuario registrÃ³ una nueva recepciÃ³n: ' . $_POST['correlativo'],
                        'media'
                    );
                }

                $id_recepcion = $recepcionRegistrada['id_recepcion'];

                    if (!defined('SKIP_SIDE_EFFECTS')) {
                        // Instanciar notificaciÃ³n solo cuando se usa
                        $bd_seguridad = new BD('S');
                        $pdo_seguridad = $bd_seguridad->getConexion();
                        $notificacionModel = new NotificacionModel($pdo_seguridad);
                        $notificacionModel->crear(
                            $_SESSION['id_usuario'],
                            'recepcion',
                            'Nueva recepciÃ³n registrada',
                            "Se ha registrado una nueva recepciÃ³n #".$_POST['correlativo']." con ".array_sum($_POST['cantidad'])." unidades por el usuario ".$_SESSION['name'],
                            'media',
                            MODULO_RECEPCION,
                            'ingresar',
                            $id_recepcion
                        );
                    }

                echo json_encode([
                    'status' => 'success',
                    'message' => 'RecepciÃ³n registrada correctamente',
                    'recepcion' => $recepcionRegistrada
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar la recepciÃ³n'
                ]);
            }
            break;

        case 'buscar':
            $correlativo = $_POST['correlativo'] ?? null;
            $k->setcorrelativo($correlativo);
            $respuesta = $k->buscar();
            if (!$respuesta) {
                echo json_encode([
                    "resultado" => "no_encontro",
                    "mensaje" => "No se encontrÃ³ el correlativo: " . $correlativo
                ]);
            } else {
                echo json_encode($respuesta);
            }
            break;
        
        case 'anular':
            header('Content-Type: application/json; charset=utf-8');
            $correlativo = $_POST['correlativo'];
            $resultado = $k->anularRecepcion($correlativo);

            // Registrar en bitÃ¡cora
            if ($resultado['status'] === 'success') {
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $bitacoraModel = new Bitacora();
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_RECEPCION,
                        'ANULAR',
                        'El usuario anulÃ³ la recepciÃ³n: ' . $correlativo,
                        'media'
                    );
                }

                // Obtener id_recepcion para referenciar en notificaciÃ³n
                if (!defined('SKIP_SIDE_EFFECTS')) {
                    $id_recepcion = $k->obtenerIdRecepcionPorCorrelativo($correlativo);
                    $bd_seguridad = new BD('S');
                    $pdo_seguridad = $bd_seguridad->getConexion();
                    $notificacionModel = new NotificacionModel($pdo_seguridad);
                    $notificacionModel->crear(
                        $_SESSION['id_usuario'],
                        'recepcion',
                        'RecepciÃ³n anulada',
                        "Se ha anulado la recepciÃ³n #".$correlativo." por parte del usuario ".($_SESSION['name'] ?? ''),
                        'media',
                        MODULO_RECEPCION,
                        'eliminar',
                        $id_recepcion
                    );
                }
            }
            echo json_encode($resultado);
        break;

        case 'reportes_recepcion':
            header('Content-Type: application/json; charset=utf-8');
            // ParÃ¡metros opcionales
            $fechaInicio = $_POST['fechaInicio'] ?? null;
            $fechaFin    = $_POST['fechaFin'] ?? null;
            $anio        = $_POST['anio'] ?? null;
            $proveedorId = $_POST['proveedorId'] ?? null;

            try {
                $resp = [
                    'proveedores' => $k->getRecepcionesPorProveedor($fechaInicio, $fechaFin),
                    'productos'   => $k->getProductosMasRecibidos($fechaInicio, $fechaFin, $proveedorId),
                    'mensual'     => $k->getRecepcionesMensuales($anio)
                ];
                echo json_encode(['status' => 'success', 'data' => $resp], JSON_UNESCAPED_UNICODE);
            } catch (Exception $e) {
                http_response_code(500);
                echo json_encode(['status' => 'error', 'message' => $e->getMessage()], JSON_UNESCAPED_UNICODE);
            }
        break;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida '.$accion.'']);
    }
    exit;
}

function getrecepcion() {
    $recepcion = new Recepcion();
    return $recepcion->getrecepcion(); // Consulta resumen: fecha, correlativo, proveedor, tamaÃ±o, costo inversiÃ³n
}
$r = new Recepcion();
$RecepcionesProveedor = $r->getRecepcionesPorProveedor();
$ProductorRecibidos = $r->getProductosMasRecibidos();
$RecepcionMensual = $r->getRecepcionesMensuales();

$proveedores = (new Recepcion())->obtenerproveedor();
$pagina = "recepcion";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel = new Bitacora();
        $bitacoraModel->registrarBitacora(
        $_SESSION['id_usuario'],
        '2',
        'ACCESAR',
        'El usuario accediÃ³ al modulo de Recepcion',
        'media'
    );}
    $recepciones = getrecepcion();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
?>
========== FIN ARCHIVO: Recepcion.php ==========



========== ARCHIVO: reporteFinanzas.php ==========

<?php
ob_start();
require_once 'modelo/cuenta.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
require_once 'modelo/finanza.php';

$id_rol = $_SESSION['id_rol'];

define('MODULO_CUENTA_BANCARIA', 15);
$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('Cuentas bancarias'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('Cuentas bancarias'));
            echo json_encode($permisosActualizados);
            exit;
        
        case 'consultar_cuentas':
            $cuentabanco = new Cuentabanco();
            $cuentas_obt = $cuentabanco->consultarCuentabanco();

            echo json_encode($cuentas_obt);
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
        exit;
    }
}

function consultarCuentabanco() {
    $cuentabanco = new Cuentabanco();
    return $cuentabanco->consultarCuentabanco();
}

function cuentasReportes() {
    $cuentabanco = new Cuentabanco();
    return $cuentabanco->cuentasReportes();
}

// Consulta automÃ¡tica para la vista
function consultarFinanzas() {
    $finanza = new Finanza();
    return [
        'ingresos' => $finanza->consultarIngresos(),
        'egresos' => $finanza->consultarEgresos()
    ];
}

$finanzas = consultarFinanzas(); // <-- PRIMERO OBTÃ‰N LOS DATOS

// Agrupar ingresos y egresos por mes
function agruparPorMes($registros) {
    $res = [];
    foreach ($registros as $r) {
        $mes = date('Y-m', strtotime($r['fecha']));
        if (!isset($res[$mes])) $res[$mes] = 0;
        $res[$mes] += $r['monto'];
    }
    return $res;
}

$ingresosPorMes = agruparPorMes($finanzas['ingresos']);
$egresosPorMes = agruparPorMes($finanzas['egresos']);



$meses = array_unique(array_merge(array_keys($ingresosPorMes), array_keys($egresosPorMes)));
sort($meses);

$totalIngresos = array_sum(array_column($finanzas['ingresos'], 'monto'));
$totalEgresos = array_sum(array_column($finanzas['egresos'], 'monto'));


$pagina = "reporteFinanzas";
if (is_file("vista/" . $pagina . ".php")) {
    $cuentabancos = consultarCuentabanco();
    $cuentasReportes = cuentasReportes();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: reporteFinanzas.php ==========



========== ARCHIVO: reporteInventario.php ==========

<?php  

require_once 'modelo/notificacion.php';
require_once("modelo/Recepcion.php");
require_once("modelo/Despacho.php");
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

$reporteDespacho = new Despacho();
$despachoEstado = $reporteDespacho->getDespachosEstado();
$despachoMes = $reporteDespacho->getProductosDespachadosPorMes();
$proveedores = $reporteDespacho->obtenercliente();
$productos = $reporteDespacho->consultarproductos();
function getdespacho() {
    $despacho = new Despacho();
    return $despacho->getdespacho();
}

// vista inicial
$despachos = getdespacho();

// Total de despachos
$totalDespachos = count($despachos);


$r = new Recepcion();
$RecepcionesProveedor = $r->getRecepcionesPorProveedor();
$ProductorRecibidos = $r->getProductosMasRecibidos();
$RecepcionMensual = $r->getRecepcionesMensuales();


$pagina = "reporteInventario";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
?>
========== FIN ARCHIVO: reporteInventario.php ==========



========== ARCHIVO: reporteproducto.php ==========

<?php
require_once '../modelo/producto.php';

$productoModel = new Productos();
$datos = $productoModel->obtenerReporteCategorias();

if (!$datos || !is_array($datos)) {
    die("No hay datos para el reporte.");
}

$total = array_sum(array_column($datos, 'cantidad'));
foreach ($datos as &$cat) {
    $cat['porcentaje'] = $total > 0 ? round(($cat['cantidad'] / $total) * 100, 2) : 0;
}
unset($cat);
?>
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Reporte de Productos por CategorÃ­a</title>
<script src="public/js/chart.js"></script>
<script src="public/js/html2canvas.min.js"></script>
<script src="public/js/jspdf.umd.min.js"></script>
    <style>
        body {
            font-family: 'Segoe UI', Arial, sans-serif;
            background: #f4f8fb;
            margin: 0;
            padding: 0;
        }
        .reporte-container {
            max-width: 900px;
            margin: 30px auto;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 2px 12px rgba(0,0,0,0.08);
            padding: 32px 24px 24px 24px;
        }
        h2 {
            color: #2c3e50;
            margin-bottom: 24px;
        }
        table {
            margin: 0 auto 32px auto;
            border-collapse: collapse;
            width: 90%;
            background: #fafbfc;
            border-radius: 8px;
            overflow: hidden;
        }
        th, td {
            border: 1px solid #e1e4e8;
            padding: 10px 18px;
            text-align: center;
        }
        th {
            background: #2980b9;
            color: #fff;
            font-weight: 600;
        }
        tr:nth-child(even) td {
            background: #f0f6fa;
        }
        tfoot th {
            background: #eaf6ff;
            color: #222;
        }
        .grafica-container {
            display: flex;
            justify-content: center;
            align-items: center;
            margin-bottom: 24px;
        }
        @media (max-width: 600px) {
            .reporte-container { padding: 10px; }
            table { width: 100%; font-size: 13px; }
        }
    </style>
</head>
<body>
    <div class="reporte-container">
        <h2>Reporte de Productos por CategorÃ­a</h2>
        <div class="grafica-container">
            <canvas id="graficoPastel" width="350" height="350"></canvas>
        </div>
        <table>
            <thead>
                <tr>
                    <th>CategorÃ­a</th>
                    <th>Cantidad de Productos</th>
                    <th>Porcentaje (%)</th>
                </tr>
            </thead>
            <tbody>
                <?php foreach ($datos as $cat): ?>
                <tr>
                    <td><?= htmlspecialchars($cat['nombre_categoria']) ?></td>
                    <td><?= $cat['cantidad'] ?></td>
                    <td><?= $cat['porcentaje'] ?>%</td>
                </tr>
                <?php endforeach; ?>
            </tbody>
            <tfoot>
                <tr>
                    <th>Total</th>
                    <th><?= $total ?></th>
                    <th>100%</th>
                </tr>
            </tfoot>
    
        </table>
        <div style="text-align:center; margin-top:20px;">
            <button id="descargarPDF" class="btn btn-success" style="padding:10px 24px; font-size:16px; border-radius:6px; background:#27ae60; color:#fff; border:none; cursor:pointer;">
                Descargar PDF
            </button>
        </div>
    </div>
<script>
    // Datos para la grÃ¡fica de pastel
    const labels = <?= json_encode(array_column($datos, 'nombre_categoria')) ?>;
    const data = <?= json_encode(array_column($datos, 'cantidad')) ?>;

    function generarColores(n) {
        const colores = [];
        for (let i = 0; i < n; i++) {
            const hue = Math.round((360 / n) * i);
            colores.push(`hsl(${hue}, 70%, 60%)`);
        }
        return colores;
    }

    const colores = generarColores(labels.length);

    const ctx = document.getElementById('graficoPastel').getContext('2d');
    new Chart(ctx, {
        type: 'pie',
        data: {
            labels: labels,
            datasets: [{
                data: data,
                backgroundColor: colores,
                borderColor: '#fff',
                borderWidth: 2
            }]
        },
        options: {
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom'
                },
                title: {
                    display: true,
                    text: 'DistribuciÃ³n de Productos por CategorÃ­a'
                },
                tooltip: {
                    callbacks: {
                        label: function(context) {
                            const label = context.label || '';
                            const value = context.parsed || 0;
                            const total = context.chart._metasets[0].total || 1;
                            const porcentaje = ((value / total) * 100).toFixed(2);
                            return `${label}: ${value} (${porcentaje}%)`;
                        }
                    }
                }
            }
        }
    });

    // Descargar PDF al hacer clic en el botÃ³n
    document.getElementById('descargarPDF').addEventListener('click', function() {
        const { jsPDF } = window.jspdf;
        const doc = new jsPDF({
            orientation: 'portrait',
            unit: 'pt',
            format: 'a4'
        });

        const reporte = document.querySelector('.reporte-container');
        html2canvas(reporte).then(canvas => {
            const imgData = canvas.toDataURL('image/png');
            const pageWidth = doc.internal.pageSize.getWidth();
            const imgWidth = pageWidth - 40;
            const imgHeight = canvas.height * imgWidth / canvas.width;

            doc.addImage(imgData, 'PNG', 20, 20, imgWidth, imgHeight);
            doc.save('Reporte_Productos_Categorias.pdf');
        });
    });
</script>
</body>
</html>
========== FIN ARCHIVO: reporteproducto.php ==========



========== ARCHIVO: reporteProductos.php ==========

<?php
// Inicia el almacenamiento en bÃºfer de salida
ob_start();

// Importa los modelos necesarios
require_once 'modelo/producto.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

define('MODULO_PRODUCTOS', 6); // Define el ID del mÃ³dulo de cuentas bancarias

$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('productos'));
// Verifica si la solicitud se realizÃ³ mediante el mÃ©todo POST



function obtenerModelos() {
    $ModelosModel = new Productos();
    return $ModelosModel->obtenerModelos();
}

$productoModel = new Productos();
// Arrays con la informaciÃ³n
$masVendidos   = $productoModel->getProductosMasVendidos();
$stockProductos = $productoModel->getStockProductos();
$rotacion      = $productoModel->getRotacionProductos();
$categorias = $productoModel->CategoriasReporte();

$categoriasDinamicas = $productoModel->obtenerCategoriasDinamicas();

$reporteCategorias = $productoModel->obtenerReporteCategorias();

if (!$reporteCategorias || !is_array($reporteCategorias)) {
    $reporteCategorias = [];
}

$totalCategorias = array_sum(array_column($reporteCategorias, 'cantidad'));
foreach ($reporteCategorias as &$cat) {
    $cat['porcentaje'] = $totalCategorias > 0 ? round(($cat['cantidad'] / $totalCategorias) * 100, 2) : 0;
}
unset($cat);
if (isset($_GET['debug']) && $_GET['debug'] == 1) {
    echo "<pre style='background:#eee;padding:10px;'>";
    echo "reporteCategorias:\n";
    print_r($reporteCategorias);
    echo "\ntotalCategorias: $totalCategorias\n";
    echo "</pre>";
}

if (empty($categoriasDinamicas)) {
    $mostrarFormulario = false;
} else {
    $mostrarFormulario = true;
}
// Asigna el nombre de la pÃ¡gina
$pagina = "reporteProductos";
// Verifica si el archivo de vista existe
if (is_file("vista/" . $pagina . ".php")) {
    // Obtiene los modelos y productos
    $modelos = obtenerModelos();
        require_once("vista/" . $pagina . ".php");
} else {
    // Muestra un mensaje si la pÃ¡gina estÃ¡ en construcciÃ³n
    echo "PÃ¡gina en construcciÃ³n";
}

// Termina el almacenamiento en bÃºfer de salida y envÃ­a la salida al navegador
ob_end_flush();

========== FIN ARCHIVO: reporteProductos.php ==========



========== ARCHIVO: reporteProveedores.php ==========

<?php
ob_start();

require_once 'modelo/proveedor.php';
require_once 'modelo/producto.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

// Definir constantes para IDs de mÃ³dulo y acciones
define('MODULO_PROVEEDORES', 8); // Cambiar segÃºn tu estructura de mÃ³dulos

$permisosObj = new Permisos();
$reporteProveedor = new Proveedores();
$reporteRankingProveedores = $reporteProveedor->getRankingProveedores();
$reporteComparacion = $reporteProveedor->getComparacionPreciosProducto();
$reporteDependencia = $reporteProveedor->getDependenciaProveedores();
$proveedorModel = new Proveedores();
$reporteSuministroProveedores = $proveedorModel->obtenerReporteSuministroProveedores();
$totalSuministrado = array_sum(array_column($reporteSuministroProveedores, 'cantidad'));


$pagina = "reporteProveedores";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: reporteProveedores.php ==========



========== ARCHIVO: reporteUsuario.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'modelo/usuario.php';
require_once 'modelo/rol.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
define('MODULO_USUARIO', 1);

$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();

$id_rol = $_SESSION['id_rol'] ?? null;

$bitacoraModel = new Bitacora();

$usuarioModel = new Usuarios();
$rolModel = new Rol();

// --- CÃ³digo relacionado al reporte de usuarios por rol ---
$reporteRoles = $usuarioModel->obtenerReporteRoles();
$selecionarRol = $rolModel->consultarRoles();
// Nuevos datasets crudos para agregaciÃ³n en el cliente (sin AJAX)
$usuariosHabilitados = $usuarioModel->getusuarios('habilitado');
$usuariosDeshabilitados = $usuarioModel->getusuarios('deshabilitado');
$usuariosTodos = array_merge($usuariosHabilitados ?? [], $usuariosDeshabilitados ?? []);

$totalRoles = array_sum(array_column($reporteRoles, 'cantidad'));
foreach ($reporteRoles as &$rol) {
    $rol['porcentaje'] = $totalRoles > 0 ? round(($rol['cantidad'] / $totalRoles) * 100, 2) : 0;
}
unset($rol);
// ---------------------------------------------------------

$pagina = "reporteUsuario";
if (is_file("vista/" . $pagina . ".php")) {
    if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            MODULO_USUARIO,
            'ACCESAR',
            'El usuario accediÃ³ al mÃ³dulo de Reportes de Usuarios',
            'media'
        );
    }
    require_once("vista/" . $pagina . ".php");

} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>
========== FIN ARCHIVO: reporteUsuario.php ==========



========== ARCHIVO: reporteVentas.php ==========

<?php  

require_once 'modelo/notificacion.php';
require_once("modelo/Recepcion.php");
require_once("modelo/Despacho.php");
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';

$reporteDespacho = new Despacho();
$despachoEstado = $reporteDespacho->getDespachosEstado();
$despachoMes = $reporteDespacho->getProductosDespachadosPorMes();
$proveedores = $reporteDespacho->obtenercliente();
$productos = $reporteDespacho->consultarproductos();
function getdespacho() {
    $despacho = new Despacho();
    return $despacho->getdespacho();
}

// vista inicial
$despachos = getdespacho();

// Total de despachos
$totalDespachos = count($despachos);



$pagina = "reporteVentas";
if (is_file("vista/" . $pagina . ".php")) {
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}
?>
========== FIN ARCHIVO: reporteVentas.php ==========



========== ARCHIVO: rol.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) { session_start(); }
require_once 'modelo/rol.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
define('MODULO_ROLES', 18);

// Inicializaciones de clases
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();
$id_rol = $_SESSION['id_rol'] ?? 0;

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, 'Roles');

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
                case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, 'Roles');
            echo json_encode($permisosActualizados);
            exit;
        case 'registrar':
            $rol = new Rol();
            $rol->setNombreRol($_POST['nombre_rol']);

            if ($rol->existeNombreRol($_POST['nombre_rol'])) {

                

                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre del rol ya existe'
                ]);
                exit;
            }

            if ($rol->registrarRol()) {
                $rolRegistrado = $rol->obtenerUltimoRol();
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_ROLES,
                        'REGISTRAR',
                        'El usuario registrÃ³ un nuevo rol: ' . $_POST['nombre_rol'],
                        'media'
                    );
                }
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Rol registrado correctamente',
                    'rol' => $rolRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar el rol'
                ]);
            }
            exit;
        
        case 'consultar_roles':
            $rol = new Rol();
            $roles_obt = $rol->consultarRoles();

            echo json_encode($roles_obt);
            exit;
        
        case 'obtener_rol':
            $id_rol = $_POST['id_rol'];

            if ($id_rol !== null) {
                $rol = new Rol();
                $rol_obt = $rol->obtenerRolPorId($id_rol);

                if ($rol_obt !== null) {
                    echo json_encode($rol_obt);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Rol no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID de rol no proporcionado']);
            }
            exit;

        case 'modificar':
            $id_rol  = $_POST['id_rol'];
            $rol = new Rol();
            $rol->setIdRol($id_rol);
            $rol->setNombreRol($_POST['nombre_rol']);
            
            if ($rol->existeNombreRol($_POST['nombre_rol'], $id_rol)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre del rol ya existe'
                ]);
                exit;
            }
                 $rolViejo = $rol->obtenerRolPorId($id_rol);
            if ($rol->modificarRol($id_rol)) {
                $rolActualizado = $rol->obtenerRolPorId($id_rol);
                if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                    $bitacoraModel->registrarBitacora(
                        $_SESSION['id_usuario'],
                        MODULO_ROLES,
                        'MODIFICAR',
                        'El usuario modificÃ³ el rol: ' . $_POST['nombre_rol']. ' (Antes: ' . ($rolViejo ? $rolViejo['nombre_rol'] : 'Desconocido') . ')',
                        'media'
                    );
                }

                echo json_encode([
                    'status' => 'success',
                    'rol' => $rolActualizado
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar el rol']);
            }
            exit;

        case 'eliminar':
            $id_rol = $_POST['id_rol'];
            $rol = new Rol();
            if ($rol->tieneUsuariosAsignados($id_rol)) {
                echo json_encode(['status' => 'error', 'message' => 'No se puede eliminar el rol porque tiene usuarios asignados']);
                exit;
            } else {
                // Obtener datos antes de eliminar para la bitÃ¡cora
                $rolEliminado = $rol->obtenerRolPorId($id_rol);
                if ($rol->eliminarRol($id_rol)) {
                    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
                        $bitacoraModel->registrarBitacora(
                            $_SESSION['id_usuario'],
                            MODULO_ROLES,
                            'ELIMINAR',
                            'El usuario eliminÃ³ el rol: ' . ($rolEliminado ? $rolEliminado['nombre_rol'] : 'ID ' . $id_rol),
                            'media'
                        );
                    }
                echo json_encode(['status' => 'success']);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el rol']);
                }
            }
            exit;

        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida']);
        exit;
    }
}

function consultarRoles() {
    $rol = new Rol();
    return $rol->consultarRoles();
}

$pagina = "rol";
if (is_file("vista/" . $pagina . ".php")) {
    if (!defined('SKIP_SIDE_EFFECTS') && isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
            $_SESSION['id_usuario'],
            MODULO_ROLES,
            'ACCESAR',
            'El usuario accediÃ³ al modulo de Roles',
            'media'
        );
    }
    $roles = consultarRoles();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: rol.php ==========



========== ARCHIVO: usuario.php ==========

<?php
ob_start();
if (session_status() === PHP_SESSION_NONE) {
    session_start();
}

require_once 'modelo/usuario.php';
require_once 'modelo/rol.php';
require_once 'modelo/permiso.php';
require_once 'modelo/bitacora.php';
define('MODULO_USUARIO', 1); // Define el ID del mÃ³dulo de cuentas bancarias
$permisos = new Permisos();
$permisosUsuarioEntrar = $permisos->getPermisosPorRolModulo();

$id_rol = $_SESSION['id_rol']; // AsegÃºrate de tener este dato en sesiÃ³n

$permisosObj = new Permisos();
$bitacoraModel = new Bitacora();
$permisosUsuario = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('usuario'));

if ($_SERVER["REQUEST_METHOD"] == "POST") {
    $id_usuario_accion = $_SESSION['id_usuario'] ?? null; // Usuario que realiza la acciÃ³n
    
    if (isset($_POST['accion'])) {
        $accion = $_POST['accion'];
    } else {
        $accion = '';
    }

    switch ($accion) {
        case 'permisos_tiempo_real':
            header('Content-Type: application/json; charset=utf-8');
            $permisosActualizados = $permisosObj->getPermisosUsuarioModulo($id_rol, strtolower('usuario'));
            echo json_encode($permisosActualizados);
            exit;

        case 'registrar':
            $usuario = new Usuarios();
            $usuario->setUsername($_POST['nombre_usuario']);
            $usuario->setClave($_POST['clave_usuario']);
            $usuario->setNombre($_POST['nombre']);
            $usuario->setApellido($_POST['apellido_usuario']);
            $usuario->setCorreo($_POST['correo_usuario']);
            $usuario->setTelefono($_POST['telefono_usuario']);
            $usuario->setRango($_POST['rango']);
            $usuario->setCedula($_POST['cedula']);

            if ($usuario->existeUsuario($_POST['nombre_usuario'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre de usuario ya existe'
                ]);
                exit;
            }
            
            if ($usuario->existeCedula($_POST['cedula'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'La cedula ingresada pertenece a un usuario que ya existe'
                ]);
                exit;
            }
            
            if ($usuario->existeCorreo($_POST['correo_usuario'])) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El correo ingresado se encuentra en uso por un usuario que ya existe'
                ]);
                exit;
            }

            if ($usuario->ingresarUsuario()) {
                $usuarioRegistrado = $usuario->obtenerUltimoUsuario();
                
                // Registrar en bitÃ¡cora
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    '1',
                    'INCLUIR',
                    'El usuario incluyÃ³ el usuario: ' . implode(', ', array_map(
                        function($value, $key) { return "$key: $value"; },
                        $usuarioRegistrado,
                        array_keys($usuarioRegistrado)
                    )),
                    'alta'
                );
                
                echo json_encode([
                    'status' => 'success',
                    'message' => 'Usuario registrado correctamente',
                    'usuario' => $usuarioRegistrado
                ]);
            } else {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'Error al registrar el usuario'
                ]);
            }
            exit;

        case 'filtrar_estatus':
            $estatus = $_POST['estatus'] ?? 'habilitado';
            $usuario = new Usuarios();
            $usuarios = $usuario->getusuarios($estatus);
            header('Content-Type: application/json; charset=utf-8');
            echo json_encode(['status' => 'success', 'usuarios' => $usuarios]);
            exit;

        case 'obtener_usuario':
            $id_usuario = $_POST['id_usuario'];
            if ($id_usuario !== null) {
                $usuario = new Usuarios();
                $usuarioData = $usuario->obtenerUsuarioPorId($id_usuario);
                
                if ($usuarioData !== null) {
                    echo json_encode($usuarioData);
                } else {
                    echo json_encode(['status' => 'error', 'message' => 'Usuario no encontrado']);
                }
            } else {
                echo json_encode(['status' => 'error', 'message' => 'ID del Usuario no proporcionado']);
            }
            exit;

        case 'modificar':
            $id_usuario = $_POST['id_usuario'];
            $usuario = new Usuarios();
            $usuario->setId($id_usuario);
            $usuario->setUsername($_POST['nombre_usuario']);
            $usuario->setNombre($_POST['nombre']);
            $usuario->setApellido($_POST['apellido_usuario']);
            $usuario->setCorreo($_POST['correo_usuario']);
            $usuario->setTelefono($_POST['telefono_usuario']);
            $usuario->setRango($_POST['rango']);
            $usuario->setCedula($_POST['cedula']);
            
            if ($usuario->existeUsuario($_POST['nombre_usuario'], $id_usuario)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El nombre de usuario ya existe'
                ]);
                exit;
            }
            if ($usuario->existeCedula($_POST['cedula'], $id_usuario)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'La cedula ingresada pertenece a un usuario que ya existe'
                ]);
                exit;
            }
            if ($usuario->existeCorreo($_POST['correo_usuario'], $id_usuario)) {
                echo json_encode([
                    'status' => 'error',
                    'message' => 'El correo ingresado se encuentra en uso por un usuario que ya existe'
                ]);
                exit;
            }
                $usuarioViejo = $usuario->obtenerUsuarioPorId($id_usuario);
            if ($usuario->modificarUsuario($id_usuario)) {
                $usuarioActualizado = $usuario->obtenerUsuarioPorId($id_usuario);
                
                // Registrar en bitÃ¡cora
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    '1',
                    'MODIFICAR',
                    'ActualizaciÃ³n de usuario: ' .$usuarioViejo.' a '.$usuarioActualizado.'',
                    'media'
                );
                
                echo json_encode([
                    'status' => 'success',
                    'usuario' => $usuarioActualizado
                ]);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al modificar el Usuario']);
            }
            exit;

        case 'eliminar':
            $id_usuario = $_POST['id_usuario'];
            $usuarioModel = new Usuarios();
            
            // Obtener datos del usuario antes de eliminarlo
            $usuarioAEliminar = $usuarioModel->obtenerUsuarioPorId($id_usuario);
            
            if ($usuarioModel->eliminarUsuario($id_usuario)) {
                // Registrar en bitÃ¡cora
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    '1',
                    'ELIMINAR',
                    'EliminaciÃ³n del usuario: ' . $usuarioAEliminar . '',
                    'media'
                );
                
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al eliminar el usuario']);
            }
            exit;

        case 'cambiar_estatus':
            $id_usuario = $_POST['id_usuario'];
            $nuevoEstatus = $_POST['nuevo_estatus'];
            
            if (!in_array($nuevoEstatus, ['habilitado', 'inhabilitado'])) {
                echo json_encode(['status' => 'error', 'message' => 'Estatus no vÃ¡lido']);
                exit;
            }
            
            $usuario = new Usuarios();
            $usuario->setId($id_usuario);
            
            if ($usuario->cambiarEstatus($nuevoEstatus)) {
                // Registrar en bitÃ¡cora
                $bitacoraModel->registrarBitacora(
                    $_SESSION['id_usuario'],
                    '1',
                    'MODIFICAR',
                    'Cambio de estatus de usuario: ' . $id_usuario . ' a ' . $nuevoEstatus,
                    'media'
                );
                
                echo json_encode(['status' => 'success']);
            } else {
                echo json_encode(['status' => 'error', 'message' => 'Error al cambiar el estatus']);
            }
            exit;
        
        default:
            echo json_encode(['status' => 'error', 'message' => 'AcciÃ³n no vÃ¡lida: '. $accion.'']);
            exit;
    }
}

function getusuarios() {
    $usuario = new Usuarios();
    return $usuario->getusuarios();
}

$usuarioModel = new Usuarios();
$rolModel = new Rol();
$reporteRoles = $usuarioModel->obtenerReporteRoles();
$selecionarRol = $rolModel->consultarRoles();
$totalRoles = array_sum(array_column($reporteRoles, 'cantidad'));
foreach ($reporteRoles as &$rol) {
    $rol['porcentaje'] = $totalRoles > 0 ? round(($rol['cantidad'] / $totalRoles) * 100, 2) : 0;
}
unset($rol);

$pagina = "usuario";
if (is_file("vista/" . $pagina . ".php")) {
         if (isset($_SESSION['id_usuario'])) {
        $bitacoraModel->registrarBitacora(
    $_SESSION['id_usuario'],
    '1',
    'ACCESAR',
    'El usuario accediÃ³ al al modulo de Usuarios',
    'media'
);}
    $usuarios = getusuarios();
    require_once("vista/" . $pagina . ".php");
} else {
    echo "PÃ¡gina en construcciÃ³n";
}

ob_end_flush();
?>

========== FIN ARCHIVO: usuario.php ==========



